/*******************************************************************************
 * Copyright (c) 2017 Inria and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Inria - initial API and implementation
 *******************************************************************************/
module fr.inria.diverse.melange.GenerateMelange

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var projectName = "fr.inria.diverse.melange"
var grammarURI = "platform:/resource/${projectName}/src/main/java/fr/inria/diverse/melange/Melange.xtext"
var fileExtensions = "melange"
var rootPath = ".."
var runtimeProject = "${rootPath}/${projectName}"



Workflow {
	bean = StandaloneSetup {
		resourceSet = org.eclipse.xtext.resource.XtextResourceSet:theResourceSet {}
		
		uriMap = {
			from = "platform:/resource/org.eclipse.xtext.xbase/"
			to = "classpath:/"
		}
		
		uriMap = {
			from = "platform:/resource/org.eclipse.xtext.common.types/"
			to = "classpath:/"
		}
		
//		uriMap = {
//			from = "platform:/resource/fr.inria.diverse.kompren.model/"
//			to = "classpath:/"
//		}

		/*uriMap = {
			from = "platform:/resource/fr.inria.diverse.melange.metamodel/"
			to = "classpath:/"
		}*/
		
		scanClassPath = true
		platformUri = "${runtimeProject}/.."
		// The following two lines can be removed, if Xbase is not used.
		registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
		registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
		registerGeneratedEPackage = "fr.inria.diverse.melange.metamodel.melange.MelangePackage"
		registerGenModelFile = "platform:/resource/fr.inria.diverse.melange.metamodel/model/Melange.genmodel"
//		registerGeneratedEPackage = "kompren.KomprenPackage"
//		registerGenModelFile = "platform:/resource/fr.inria.diverse.kompren.model/model/kompren.genmodel"
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}/model"
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}
	
	component = DirectoryCleaner {
		directory = "../../tests/fr.inria.diverse.melange.tests/src-gen"
	}
	component = DirectoryCleaner {
		directory = "../../tests/fr.inria.diverse.melange.tests.eclipse/src-gen"
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}/src/fr"
	}
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "${projectName}"
				rootPath = rootPath
				
				runtime = {
					src= "src/main/java"
				}
				genericIde = {
					enabled =  true
					src = "${rootPath}/fr.inria.diverse.melange.ide/src/main/java"
					
					//srcGen = "${rootPath}/fr.inria.diverse.melange.ide/src-gen"
					//src = "src/main/java"
					//src = "src/main/java"
					//root="${rootPath}/fr.inria.diverse.melange.ide"
				}
				
				runtimeTest = {
					enabled = true
					root="${rootPath}/../tests/fr.inria.diverse.melange.tests"
				}
				eclipsePlugin = {
					enabled = true
					src = "${rootPath}/fr.inria.diverse.melange.ui/src/main/java"
					
				}
				eclipsePluginTest = {
					enabled = true
					root="${rootPath}/../tests/fr.inria.diverse.melange.tests.eclipse"
				}
				createEclipseMetaData = true
				
			}
			code = {
				encoding = "UTF-8"
				lineDelimiter = "\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
				preferXtendStubs = true
			}
		}
		/*pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		pathTestProject = "../../tests/fr.inria.diverse.melange.tests"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		encoding = encoding*/
		// language = XtextGeneratorLanguage {
		language = StandardLanguage {
			//resourceSet = theResourceSet
			name = "fr.inria.diverse.melange.Melange"
			grammarUri = grammarURI
			fileExtensions = "${fileExtensions}"
			referencedResource = "platform:/resource/fr.inria.diverse.melange.metamodel/model/Melange.genmodel"
			
			 
			formatter = {
				generateStub = true
				generateXtendStub = true
			}
			
			
			scopeProvider = scoping.ImportNamespacesScopingFragment2 auto-inject { 
				generateXtendStub = true
			}
			
			contentAssist = {
			 	generateStub = true
			}
			
			/*
			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment2 {}
			*/
			// generates Java API for the generated EPackages
			/*fragment = ecore.EMFGeneratorFragment2 {
				javaModelDirectory = "/${projectName}/src-gen"
			}
			
			fragment = serializer.SerializerFragment2 {
				generateStub = true
			}
			
			fragment = resourceFactory.ResourceFactoryFragment2 {}
			
			// The antlr parser generator fragment.
			fragment = parser.antlr.XtextAntlrGeneratorFragment2 {}
			
			// Xtend-based API for validation
			fragment = validation.ValidatorFragment2 {}
			
			// scoping and exporting API
			fragment = scoping.ImportNamespacesScopingFragment2 {}
			fragment = exporting.QualifiedNamesFragment2 {}
			fragment = builder.BuilderIntegrationFragment2 {}
			
			// generator API
			fragment = generator.GeneratorFragment2 {}
	
			// formatter API
			fragment = formatting.Formatter2Fragment2 {}
	
			// labeling API
			fragment = ui.labeling.LabelProviderFragment2 {}
	
			// outline API
			fragment = ui.outline.QuickOutlineFragment2 {}
    		fragment = ui.outline.OutlineTreeProviderFragment2 {}
	
			// quickfix API
			fragment = ui.quickfix.QuickfixProviderFragment2 {}
	
			// content assist API
			fragment = ui.contentAssist.ContentAssistFragment2 {}
	
	
			// generates junit test support classes into Generator#pathTestProject
			//fragment = junit.JunitFragment {}
	
			// rename refactoring
			fragment = ui.refactoring.RefactorElementNameFragment2 {}
	
			// provides the necessary bindings for java types integration
			fragment = types.TypesGeneratorFragment2 {}
	
			// generates the required bindings only if the grammar inherits from Xbase
			fragment = xbase.XtypeGeneratorFragment2 {}
    		fragment = xbase.XbaseGeneratorFragment2 {}
	
			// provides a preference page for template proposals
			fragment = ui.templates.CodetemplatesGeneratorFragment2 {}
	
			// provides a compare view
			fragment = ui.compare.CompareFragment2 {}
			*/
		}
		/* language = auto-inject {
			forcedResourceSet = theResourceSet
			
			uri = grammarURI
	
			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}
	
			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment auto-inject {
				javaModelDirectory = "/${projectName}/src-gen"
			}
	
			// the old serialization component
			// fragment = parseTreeConstructor.ParseTreeConstructorFragment auto-inject {}	
	
			// serializer 2.0
			fragment = serializer.SerializerFragment auto-inject {
				generateStub = false
			}
	
			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {}
	
			// The antlr parser generator fragment.
			fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {
			//  options = {
			//	  backtrack = true
			//  }
			}
	
			// Xtend-based API for validation
			fragment = validation.ValidatorFragment auto-inject {
			//	composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
			//	composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}
	
			// old scoping and exporting API
			// fragment = scoping.ImportURIScopingFragment auto-inject {}
			// fragment = exporting.SimpleNamesFragment auto-inject {}
	
			// scoping and exporting API
			fragment = scoping.ImportNamespacesScopingFragment auto-inject {}
			fragment = exporting.QualifiedNamesFragment auto-inject {}
			fragment = builder.BuilderIntegrationFragment auto-inject {}
	
			// generator API
			fragment = generator.GeneratorFragment auto-inject {}
	
			// formatter API
			fragment = formatting.FormatterFragment auto-inject {}
	
			// labeling API
			fragment = labeling.LabelProviderFragment auto-inject {}
	
			// outline API
			fragment = outline.OutlineTreeProviderFragment auto-inject {}
			fragment = outline.QuickOutlineFragment auto-inject {}
	
			// quickfix API
			fragment = quickfix.QuickfixProviderFragment auto-inject {}
	
			// content assist API
			fragment = contentAssist.ContentAssistFragment auto-inject {}
	
			// generates a more lightweight Antlr parser and lexer tailored for content assist
			fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {}
	
			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment auto-inject {}
	
			// rename refactoring
			fragment = refactoring.RefactorElementNameFragment auto-inject {}
	
			// provides the necessary bindings for java types integration
			fragment = types.TypesGeneratorFragment auto-inject {}
	
			// generates the required bindings only if the grammar inherits from Xbase
			fragment = xbase.XbaseGeneratorFragment auto-inject {}
	
			// provides a preference page for template proposals
			fragment = templates.CodetemplatesGeneratorFragment auto-inject {}
	
			// provides a compare view
			fragment = compare.CompareFragment auto-inject {}
		}*/
	}
}
