grammar fr.inria.diverse.melange.Melange with org.eclipse.xtext.xbase.Xbase

import "http://www.inria.fr/diverse/melange"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//import "http://kompren/fr.inria.diverse.kompren" as kompren

ModelTypingSpace:
	('package' name = QualifiedName)?
	(imports = XImportSection)?
	(elements += Element)*
;

Element:
	Language | EcoreModelType | TransformationDecl | Mapping
;

TransformationDecl returns Transformation:
	XbaseTransformation// | KomprenSlicer
;

Language:
	'language' name = ValidID ('inherits' operators += Inherit ("," operators += Inherit)*)?
	('implements' implements += [ModelType | QualifiedName] (',' implements += [ModelType | QualifiedName])*)?
	('requires' requires += [ModelType | QualifiedName] (',' requires += [ModelType | QualifiedName])*)?
	'{'
		('resource' resourceType = ResourceType (=> 'uri' resourceUri = STRING | 'setup' xtextSetupRef = JvmTypeReference)?)? &
		(operators += Operator)* &
		('exactType' exactTypeName = ValidID (=> 'uri' exactTypeUri = STRING)?)
	'}'
;

enum ResourceType:
	MELANGE = 'Melange' | EMF = 'EMF' | XTEXT = 'Xtext'
;

//Inheritance returns Inheritance:
//	'inherits' superMetamodel = [Metamodel | QualifiedName]
//;

EcoreModelType returns ModelType:
	'modeltype' name = ValidID '{'
		'syntax' ecoreUri = STRING &
		('uri' mtUri = STRING)?
	'}'
;

XbaseTransformation:
	(main ?= '@Main')?
	'transformation' (returnTypeRef = JvmTypeReference)? name = ValidID
	'(' (parameters += FullJvmFormalParameter (',' parameters += FullJvmFormalParameter)*)? ')'
	body = XBlockExpression
;

//KomprenSlicer:
//	slicer = Slicer
//;

Mapping returns Mapping:
	"map" from=[Language | QualifiedName] "to" to=[ModelType | QualifiedName] "{"
		(rules+=ClassMapping)*
	"}" 
;

PackageMapping returns PackageBinding:
	from=[ecore::EPackage | QualifiedName] "to" to=STRING "{"
		(classes+=ClassMapping)*
	"}"
;

ClassMapping returns ClassBinding:
	from=[ecore::EClassifier | QualifiedName] "to" to=STRING "{"
		(properties+=PropertyMapping)*
	"}"
;

PropertyMapping returns PropertyBinding:
	from=[ecore::ETypedElement | QualifiedName] ":" to=STRING
;

Operator returns Operator:
	Import | Merge | Slice | Weave
;

Import returns Import:
	'syntax' ecoreUri = STRING ('withGenmodel' (genmodelUris += STRING (',' genmodelUris += STRING)*))?
	('and-rename' '{'
		(mappingRules+=PackageMapping)*
	'}')?
;

Merge returns Merge:
	'merge' mergedLanguage = [Language | QualifiedName] 
	('and-rename' '{'
		(mappingRules+=PackageMapping)*
	'}')?
;

Slice returns Slice:
	'slice' slicedLanguage = [Language | QualifiedName] 'on' '[' roots += [ecore::EClass | QualifiedName] (',' roots += [ecore::EClass | QualifiedName])* ']'
	('and-rename' '{'
		(mappingRules+=PackageMapping)*
	'}')?
;

Inherit returns Inheritance:
	superLanguage = [Language | QualifiedName]
;

Weave:
	AspectTypeRef | AspectWildcard
;

AspectTypeRef returns Weave:
    'with' aspectTypeRef = JvmTypeReference
;

AspectWildcard returns Weave:
	'with' aspectWildcardImport = QualifiedNameWithWildcard
;

/* --- Kompren Rules --- */
//Slicer returns kompren::Slicer: 'slicer' (active?='active')? (strict?='strict')? name=QualifiedName '{'
//		(('domain' ':' uriMetamodel+=STRING)+ &
//		('outputDomain' ':' outputMetamodel=STRING)? &
//		('input' ':' inputClasses+=[ecore::EClass|QualifiedName] ( "," inputClasses+=[ecore::EClass|QualifiedName])*) &
//		('radius' ':' radius=Radius)? &
//		(('slicedClass' ':' slicedElements+=SlicedClass) |
//		('slicedProperty' ':' slicedElements+=SlicedProperty))* &
//		('onStart' onStart=CODE_BLOCK)? &
//		('onEnd' onEnd=CODE_BLOCK)? &
//		('helper' helper=CODE_BLOCK)?)
//	'}';
//
//Constraint returns kompren::Constraint: name=ValidID expression=CODE_BLOCK;
//
//Radius returns kompren::Radius: {kompren::Radius} (focusedClasses+=[kompren::SlicedClass|QualifiedName] ( "," focusedClasses+=[kompren::SlicedClass|QualifiedName])* )?;
//
//SlicedClass returns kompren::SlicedClass: domain=[ecore::EClass|QualifiedName] (isOption?='option')? (ctx=VarDecl)? 
//	(expression=CODE_BLOCK)? ('constraint' ':' constraints+=Constraint)*;
//
//VarDecl returns kompren::VarDecl: varName=ValidID;
//
//SlicedProperty returns kompren::SlicedProperty:
//	domain=[ecore::EStructuralFeature|QualifiedName] (isOption?='option')? (opposite=OppositeCreation)? (src=VarDecl tgt=VarDecl)?
//		 (expression=CODE_BLOCK)? ('constraint' ':' constraints+=Constraint)*;
//
//OppositeCreation returns kompren::OppositeCreation: {kompren::OppositeCreation} 'opposite' '(' name=ValidID ')';
//
//terminal CODE_BLOCK : '[[' -> ']]';
