grammar fr.inria.diverse.melange.Melange with org.eclipse.xtext.xbase.Xbase

import "http://www.inria.fr/diverse/melange"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ModelTypingSpace:
	'package' name = QualifiedName
	(imports = XImportSection)?
	(elements += Element)*
;

Element:
	 Language | (=> 'external' ExternalLanguage) | EcoreModelType | TransformationDecl | Mapping
;

TransformationDecl returns Transformation:
	XbaseTransformation
;

Language:
	'language' name = ValidID ('inherits' operators += Inherit ("," operators += Inherit)*)?
	('implements' implements += [ModelType | QualifiedName] (',' implements += [ModelType | QualifiedName])*)?
	('requires' requires += [ModelType | QualifiedName] (',' requires += [ModelType | QualifiedName])*)?
	'{'
		(operators += Operator)* &
		('resource' resourceType = ResourceType (=> 'uri' resourceUri = STRING | 'setup' xtextSetupRef = JvmTypeReference)?)? &
		('xtext' xtext+=STRING (',' xtext+=STRING)* )? &
		('sirius' sirius+=STRING (',' sirius+=STRING)* )? &
		('ecl' ecl+=STRING (',' ecl+=STRING)* )? &
		('xmof' xmof=STRING)? &
		('fileExtension' fileExtension=STRING)? &
		('exactType' exactTypeName = ValidID (=> 'uri' exactTypeUri = STRING)?)? &
		annotations+=(Annotation)*
	'}'
;

Annotation:
	'annotation' key=STRING ":" value=STRING
;

ExternalLanguage:
	'language' name = ValidID 
	('implements' implements += [ModelType | QualifiedName] (',' implements += [ModelType | QualifiedName])*)?
	'{'
		operators += ExternalImport &
		(operators += Weave)* &
//		('resource' resourceType = ResourceType (=> 'uri' resourceUri = STRING | 'setup' xtextSetupRef = JvmTypeReference)?)? &
		('xtext' xtext+=STRING (',' xtext+=STRING)* )? &
		('sirius' sirius+=STRING (',' sirius+=STRING)* )? &
		('ecl' ecl+=STRING (',' ecl+=STRING)* )? &
		('xmof' xmof=STRING)? &
		('fileExtension' fileExtension=STRING)? &
		('exactType' exactTypeName = ValidID (=> 'uri' exactTypeUri = STRING)?)?
	'}'
;

enum ResourceType:
	MELANGE = 'Melange' | EMF = 'EMF' | XTEXT = 'Xtext'
;

EcoreModelType returns ModelType:
	'modeltype' name = ValidID '{'
		'syntax' ecoreUri = STRING &
		('uri' mtUri = STRING)?
	'}'
;

XbaseTransformation:
	(main ?= '@Main')?
	'transformation' (returnTypeRef = JvmTypeReference)? name = ValidID
	'(' (parameters += FullJvmFormalParameter (',' parameters += FullJvmFormalParameter)*)? ')'
	body = XBlockExpression
;

//KomprenSlicer:
//	slicer = Slicer
//;

Mapping returns Mapping:
	"map" from=[Language | QualifiedName] "to" to=[ModelType | QualifiedName] "{"
		(rules+=ClassMapping)*
	"}" 
;

PackageMapping returns PackageBinding:
	from=STRING "to" to=STRING ("{"
		(classes+=ClassMapping)*
	"}")?
;

ClassMapping returns ClassBinding:
	from=STRING "to" to=STRING ("{"
		(properties+=PropertyMapping)*
	"}")?
;

PropertyMapping returns PropertyBinding:
	from=STRING "to" to=STRING
;

Operator returns Operator:
	Import | Merge | Slice | Weave
;

Import returns Import:
	'syntax' ecoreUri = STRING ('withGenmodel' (genmodelUris += STRING (',' genmodelUris += STRING)*))?
	('renaming' '{'
		(mappingRules+=PackageMapping)*
	'}')?
;

ExternalImport returns Import:
	'syntax' ecoreUri = STRING ('withGenmodel' (genmodelUris += STRING (',' genmodelUris += STRING)*))?
;

Merge returns Merge:
	'merge' targetLanguage = [Language | QualifiedName] 
	('renaming' '{'
		(mappingRules+=PackageMapping)*
	'}')?
;

Slice returns Slice:
	'slice' targetLanguage = [Language | QualifiedName] 'on' '[' roots += STRING (',' roots += STRING)* ']'
	('renaming' '{'
		(mappingRules+=PackageMapping)*
	'}')?
;

Inherit returns Inheritance:
	targetLanguage = [Language | QualifiedName]
;

Weave:
	AspectTypeRef | AspectWildcard
;

AspectTypeRef returns Weave:
	'with' aspectTypeRef = JvmTypeReference
;

AspectWildcard returns Weave:
	'with' aspectWildcardImport = QualifiedNameWithWildcard
;
