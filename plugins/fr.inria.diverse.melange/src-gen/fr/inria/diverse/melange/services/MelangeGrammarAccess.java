/*
 * generated by Xtext
 */
package fr.inria.diverse.melange.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class MelangeGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelTypingSpaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.melange.Melange.ModelTypingSpace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsXImportSectionParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		
		//ModelTypingSpace:
		//	'package' name=QualifiedName
		//	imports=XImportSection?
		//	elements+=Element*;
		@Override public ParserRule getRule() { return rule; }

		//'package' name=QualifiedName imports=XImportSection? elements+=Element*
		public Group getGroup() { return cGroup; }

		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//imports=XImportSection?
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//XImportSection
		public RuleCall getImportsXImportSectionParserRuleCall_2_0() { return cImportsXImportSectionParserRuleCall_2_0; }

		//elements+=Element*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//Element
		public RuleCall getElementsElementParserRuleCall_3_0() { return cElementsElementParserRuleCall_3_0; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.melange.Melange.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLanguageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cExternalKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExternalLanguageParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cEcoreModelTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTransformationDeclParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMappingParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Element:
		//	Language | => 'external' ExternalLanguage | EcoreModelType | TransformationDecl | Mapping;
		@Override public ParserRule getRule() { return rule; }

		//Language | => 'external' ExternalLanguage | EcoreModelType | TransformationDecl | Mapping
		public Alternatives getAlternatives() { return cAlternatives; }

		//Language
		public RuleCall getLanguageParserRuleCall_0() { return cLanguageParserRuleCall_0; }

		//=> 'external' ExternalLanguage
		public Group getGroup_1() { return cGroup_1; }

		//=> 'external'
		public Keyword getExternalKeyword_1_0() { return cExternalKeyword_1_0; }

		//ExternalLanguage
		public RuleCall getExternalLanguageParserRuleCall_1_1() { return cExternalLanguageParserRuleCall_1_1; }

		//EcoreModelType
		public RuleCall getEcoreModelTypeParserRuleCall_2() { return cEcoreModelTypeParserRuleCall_2; }

		//TransformationDecl
		public RuleCall getTransformationDeclParserRuleCall_3() { return cTransformationDeclParserRuleCall_3; }

		//Mapping
		public RuleCall getMappingParserRuleCall_4() { return cMappingParserRuleCall_4; }
	}

	public class TransformationDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.melange.Melange.TransformationDecl");
		private final RuleCall cXbaseTransformationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TransformationDecl Transformation:
		//	XbaseTransformation
		@Override public ParserRule getRule() { return rule; }

		//XbaseTransformation
		public RuleCall getXbaseTransformationParserRuleCall() { return cXbaseTransformationParserRuleCall; }
	}

	public class LanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.melange.Melange.Language");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cLanguageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cInheritsKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cOperatorsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cOperatorsInheritParserRuleCall_0_2_1_0 = (RuleCall)cOperatorsAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_0_2_2 = (Group)cGroup_0_2.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_2_0 = (Keyword)cGroup_0_2_2.eContents().get(0);
		private final Assignment cOperatorsAssignment_0_2_2_1 = (Assignment)cGroup_0_2_2.eContents().get(1);
		private final RuleCall cOperatorsInheritParserRuleCall_0_2_2_1_0 = (RuleCall)cOperatorsAssignment_0_2_2_1.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cImplementsKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cImplementsAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final CrossReference cImplementsModelTypeCrossReference_0_3_1_0 = (CrossReference)cImplementsAssignment_0_3_1.eContents().get(0);
		private final RuleCall cImplementsModelTypeQualifiedNameParserRuleCall_0_3_1_0_1 = (RuleCall)cImplementsModelTypeCrossReference_0_3_1_0.eContents().get(1);
		private final Group cGroup_0_3_2 = (Group)cGroup_0_3.eContents().get(2);
		private final Keyword cCommaKeyword_0_3_2_0 = (Keyword)cGroup_0_3_2.eContents().get(0);
		private final Assignment cImplementsAssignment_0_3_2_1 = (Assignment)cGroup_0_3_2.eContents().get(1);
		private final CrossReference cImplementsModelTypeCrossReference_0_3_2_1_0 = (CrossReference)cImplementsAssignment_0_3_2_1.eContents().get(0);
		private final RuleCall cImplementsModelTypeQualifiedNameParserRuleCall_0_3_2_1_0_1 = (RuleCall)cImplementsModelTypeCrossReference_0_3_2_1_0.eContents().get(1);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cRequiresKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cRequiresAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final CrossReference cRequiresModelTypeCrossReference_0_4_1_0 = (CrossReference)cRequiresAssignment_0_4_1.eContents().get(0);
		private final RuleCall cRequiresModelTypeQualifiedNameParserRuleCall_0_4_1_0_1 = (RuleCall)cRequiresModelTypeCrossReference_0_4_1_0.eContents().get(1);
		private final Group cGroup_0_4_2 = (Group)cGroup_0_4.eContents().get(2);
		private final Keyword cCommaKeyword_0_4_2_0 = (Keyword)cGroup_0_4_2.eContents().get(0);
		private final Assignment cRequiresAssignment_0_4_2_1 = (Assignment)cGroup_0_4_2.eContents().get(1);
		private final CrossReference cRequiresModelTypeCrossReference_0_4_2_1_0 = (CrossReference)cRequiresAssignment_0_4_2_1.eContents().get(0);
		private final RuleCall cRequiresModelTypeQualifiedNameParserRuleCall_0_4_2_1_0_1 = (RuleCall)cRequiresModelTypeCrossReference_0_4_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cOperatorsAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cOperatorsOperatorParserRuleCall_0_6_0 = (RuleCall)cOperatorsAssignment_0_6.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cResourceKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cResourceTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cResourceTypeResourceTypeEnumRuleCall_1_1_0 = (RuleCall)cResourceTypeAssignment_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cAlternatives_1_2.eContents().get(0);
		private final Keyword cUriKeyword_1_2_0_0 = (Keyword)cGroup_1_2_0.eContents().get(0);
		private final Assignment cResourceUriAssignment_1_2_0_1 = (Assignment)cGroup_1_2_0.eContents().get(1);
		private final RuleCall cResourceUriSTRINGTerminalRuleCall_1_2_0_1_0 = (RuleCall)cResourceUriAssignment_1_2_0_1.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cAlternatives_1_2.eContents().get(1);
		private final Keyword cSetupKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cXtextSetupRefAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cXtextSetupRefJvmTypeReferenceParserRuleCall_1_2_1_1_0 = (RuleCall)cXtextSetupRefAssignment_1_2_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cXtextKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cXtextAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cXtextSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cXtextAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cXtextAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cXtextSTRINGTerminalRuleCall_2_2_1_0 = (RuleCall)cXtextAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Keyword cSiriusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSiriusAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSiriusSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cSiriusAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cSiriusAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cSiriusSTRINGTerminalRuleCall_3_2_1_0 = (RuleCall)cSiriusAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cUnorderedGroup.eContents().get(4);
		private final Keyword cEclKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEclAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEclSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cEclAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cEclAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cEclSTRINGTerminalRuleCall_4_2_1_0 = (RuleCall)cEclAssignment_4_2_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cUnorderedGroup.eContents().get(5);
		private final Keyword cXmofKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cXmofAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cXmofSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cXmofAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cUnorderedGroup.eContents().get(6);
		private final Keyword cFileExtensionKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cFileExtensionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cFileExtensionSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cFileExtensionAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cUnorderedGroup.eContents().get(7);
		private final Keyword cExactTypeKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cExactTypeNameAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cExactTypeNameValidIDParserRuleCall_7_1_0 = (RuleCall)cExactTypeNameAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cUriKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cExactTypeUriAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cExactTypeUriSTRINGTerminalRuleCall_7_2_1_0 = (RuleCall)cExactTypeUriAssignment_7_2_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cUnorderedGroup.eContents().get(8);
		private final Assignment cAnnotationsAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_8_0_0 = (RuleCall)cAnnotationsAssignment_8_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		
		//Language:
		//	'language' name=ValidID ('inherits' operators+=Inherit ("," operators+=Inherit)*)? ('implements'
		//	implements+=[ModelType|QualifiedName] (',' implements+=[ModelType|QualifiedName])*)? ('requires'
		//	requires+=[ModelType|QualifiedName] (',' requires+=[ModelType|QualifiedName])*)?
		//	'{'
		//	operators+=Operator* & ('resource' resourceType=ResourceType (=> 'uri' resourceUri=STRING | 'setup'
		//	xtextSetupRef=JvmTypeReference)?)? & ('xtext' xtext+=STRING (',' xtext+=STRING)*)? & ('sirius' sirius+=STRING (','
		//	sirius+=STRING)*)? & ('ecl' ecl+=STRING (',' ecl+=STRING)*)? & ('xmof' xmof=STRING)? & ('fileExtension'
		//	fileExtension=STRING)? & ('exactType' exactTypeName=ValidID (=> 'uri' exactTypeUri=STRING)?)? &
		//	annotations+=Annotation*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'language' name=ValidID ('inherits' operators+=Inherit ("," operators+=Inherit)*)? ('implements'
		//implements+=[ModelType|QualifiedName] (',' implements+=[ModelType|QualifiedName])*)? ('requires'
		//requires+=[ModelType|QualifiedName] (',' requires+=[ModelType|QualifiedName])*)? '{' operators+=Operator* & ('resource'
		//resourceType=ResourceType (=> 'uri' resourceUri=STRING | 'setup' xtextSetupRef=JvmTypeReference)?)? & ('xtext'
		//xtext+=STRING (',' xtext+=STRING)*)? & ('sirius' sirius+=STRING (',' sirius+=STRING)*)? & ('ecl' ecl+=STRING (','
		//ecl+=STRING)*)? & ('xmof' xmof=STRING)? & ('fileExtension' fileExtension=STRING)? & ('exactType' exactTypeName=ValidID
		//(=> 'uri' exactTypeUri=STRING)?)? & annotations+=Annotation* '}'
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//'language' name=ValidID ('inherits' operators+=Inherit ("," operators+=Inherit)*)? ('implements'
		//implements+=[ModelType|QualifiedName] (',' implements+=[ModelType|QualifiedName])*)? ('requires'
		//requires+=[ModelType|QualifiedName] (',' requires+=[ModelType|QualifiedName])*)? '{' operators+=Operator*
		public Group getGroup_0() { return cGroup_0; }

		//'language'
		public Keyword getLanguageKeyword_0_0() { return cLanguageKeyword_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_1_0() { return cNameValidIDParserRuleCall_0_1_0; }

		//('inherits' operators+=Inherit ("," operators+=Inherit)*)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//'inherits'
		public Keyword getInheritsKeyword_0_2_0() { return cInheritsKeyword_0_2_0; }

		//operators+=Inherit
		public Assignment getOperatorsAssignment_0_2_1() { return cOperatorsAssignment_0_2_1; }

		//Inherit
		public RuleCall getOperatorsInheritParserRuleCall_0_2_1_0() { return cOperatorsInheritParserRuleCall_0_2_1_0; }

		//("," operators+=Inherit)*
		public Group getGroup_0_2_2() { return cGroup_0_2_2; }

		//","
		public Keyword getCommaKeyword_0_2_2_0() { return cCommaKeyword_0_2_2_0; }

		//operators+=Inherit
		public Assignment getOperatorsAssignment_0_2_2_1() { return cOperatorsAssignment_0_2_2_1; }

		//Inherit
		public RuleCall getOperatorsInheritParserRuleCall_0_2_2_1_0() { return cOperatorsInheritParserRuleCall_0_2_2_1_0; }

		//('implements' implements+=[ModelType|QualifiedName] (',' implements+=[ModelType|QualifiedName])*)?
		public Group getGroup_0_3() { return cGroup_0_3; }

		//'implements'
		public Keyword getImplementsKeyword_0_3_0() { return cImplementsKeyword_0_3_0; }

		//implements+=[ModelType|QualifiedName]
		public Assignment getImplementsAssignment_0_3_1() { return cImplementsAssignment_0_3_1; }

		//[ModelType|QualifiedName]
		public CrossReference getImplementsModelTypeCrossReference_0_3_1_0() { return cImplementsModelTypeCrossReference_0_3_1_0; }

		//QualifiedName
		public RuleCall getImplementsModelTypeQualifiedNameParserRuleCall_0_3_1_0_1() { return cImplementsModelTypeQualifiedNameParserRuleCall_0_3_1_0_1; }

		//(',' implements+=[ModelType|QualifiedName])*
		public Group getGroup_0_3_2() { return cGroup_0_3_2; }

		//','
		public Keyword getCommaKeyword_0_3_2_0() { return cCommaKeyword_0_3_2_0; }

		//implements+=[ModelType|QualifiedName]
		public Assignment getImplementsAssignment_0_3_2_1() { return cImplementsAssignment_0_3_2_1; }

		//[ModelType|QualifiedName]
		public CrossReference getImplementsModelTypeCrossReference_0_3_2_1_0() { return cImplementsModelTypeCrossReference_0_3_2_1_0; }

		//QualifiedName
		public RuleCall getImplementsModelTypeQualifiedNameParserRuleCall_0_3_2_1_0_1() { return cImplementsModelTypeQualifiedNameParserRuleCall_0_3_2_1_0_1; }

		//('requires' requires+=[ModelType|QualifiedName] (',' requires+=[ModelType|QualifiedName])*)?
		public Group getGroup_0_4() { return cGroup_0_4; }

		//'requires'
		public Keyword getRequiresKeyword_0_4_0() { return cRequiresKeyword_0_4_0; }

		//requires+=[ModelType|QualifiedName]
		public Assignment getRequiresAssignment_0_4_1() { return cRequiresAssignment_0_4_1; }

		//[ModelType|QualifiedName]
		public CrossReference getRequiresModelTypeCrossReference_0_4_1_0() { return cRequiresModelTypeCrossReference_0_4_1_0; }

		//QualifiedName
		public RuleCall getRequiresModelTypeQualifiedNameParserRuleCall_0_4_1_0_1() { return cRequiresModelTypeQualifiedNameParserRuleCall_0_4_1_0_1; }

		//(',' requires+=[ModelType|QualifiedName])*
		public Group getGroup_0_4_2() { return cGroup_0_4_2; }

		//','
		public Keyword getCommaKeyword_0_4_2_0() { return cCommaKeyword_0_4_2_0; }

		//requires+=[ModelType|QualifiedName]
		public Assignment getRequiresAssignment_0_4_2_1() { return cRequiresAssignment_0_4_2_1; }

		//[ModelType|QualifiedName]
		public CrossReference getRequiresModelTypeCrossReference_0_4_2_1_0() { return cRequiresModelTypeCrossReference_0_4_2_1_0; }

		//QualifiedName
		public RuleCall getRequiresModelTypeQualifiedNameParserRuleCall_0_4_2_1_0_1() { return cRequiresModelTypeQualifiedNameParserRuleCall_0_4_2_1_0_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_5() { return cLeftCurlyBracketKeyword_0_5; }

		//operators+=Operator*
		public Assignment getOperatorsAssignment_0_6() { return cOperatorsAssignment_0_6; }

		//Operator
		public RuleCall getOperatorsOperatorParserRuleCall_0_6_0() { return cOperatorsOperatorParserRuleCall_0_6_0; }

		//('resource' resourceType=ResourceType (=> 'uri' resourceUri=STRING | 'setup' xtextSetupRef=JvmTypeReference)?)?
		public Group getGroup_1() { return cGroup_1; }

		//'resource'
		public Keyword getResourceKeyword_1_0() { return cResourceKeyword_1_0; }

		//resourceType=ResourceType
		public Assignment getResourceTypeAssignment_1_1() { return cResourceTypeAssignment_1_1; }

		//ResourceType
		public RuleCall getResourceTypeResourceTypeEnumRuleCall_1_1_0() { return cResourceTypeResourceTypeEnumRuleCall_1_1_0; }

		//(=> 'uri' resourceUri=STRING | 'setup' xtextSetupRef=JvmTypeReference)?
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }

		//=> 'uri' resourceUri=STRING
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }

		//=> 'uri'
		public Keyword getUriKeyword_1_2_0_0() { return cUriKeyword_1_2_0_0; }

		//resourceUri=STRING
		public Assignment getResourceUriAssignment_1_2_0_1() { return cResourceUriAssignment_1_2_0_1; }

		//STRING
		public RuleCall getResourceUriSTRINGTerminalRuleCall_1_2_0_1_0() { return cResourceUriSTRINGTerminalRuleCall_1_2_0_1_0; }

		//'setup' xtextSetupRef=JvmTypeReference
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }

		//'setup'
		public Keyword getSetupKeyword_1_2_1_0() { return cSetupKeyword_1_2_1_0; }

		//xtextSetupRef=JvmTypeReference
		public Assignment getXtextSetupRefAssignment_1_2_1_1() { return cXtextSetupRefAssignment_1_2_1_1; }

		//JvmTypeReference
		public RuleCall getXtextSetupRefJvmTypeReferenceParserRuleCall_1_2_1_1_0() { return cXtextSetupRefJvmTypeReferenceParserRuleCall_1_2_1_1_0; }

		//('xtext' xtext+=STRING (',' xtext+=STRING)*)?
		public Group getGroup_2() { return cGroup_2; }

		//'xtext'
		public Keyword getXtextKeyword_2_0() { return cXtextKeyword_2_0; }

		//xtext+=STRING
		public Assignment getXtextAssignment_2_1() { return cXtextAssignment_2_1; }

		//STRING
		public RuleCall getXtextSTRINGTerminalRuleCall_2_1_0() { return cXtextSTRINGTerminalRuleCall_2_1_0; }

		//(',' xtext+=STRING)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//xtext+=STRING
		public Assignment getXtextAssignment_2_2_1() { return cXtextAssignment_2_2_1; }

		//STRING
		public RuleCall getXtextSTRINGTerminalRuleCall_2_2_1_0() { return cXtextSTRINGTerminalRuleCall_2_2_1_0; }

		//('sirius' sirius+=STRING (',' sirius+=STRING)*)?
		public Group getGroup_3() { return cGroup_3; }

		//'sirius'
		public Keyword getSiriusKeyword_3_0() { return cSiriusKeyword_3_0; }

		//sirius+=STRING
		public Assignment getSiriusAssignment_3_1() { return cSiriusAssignment_3_1; }

		//STRING
		public RuleCall getSiriusSTRINGTerminalRuleCall_3_1_0() { return cSiriusSTRINGTerminalRuleCall_3_1_0; }

		//(',' sirius+=STRING)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//sirius+=STRING
		public Assignment getSiriusAssignment_3_2_1() { return cSiriusAssignment_3_2_1; }

		//STRING
		public RuleCall getSiriusSTRINGTerminalRuleCall_3_2_1_0() { return cSiriusSTRINGTerminalRuleCall_3_2_1_0; }

		//('ecl' ecl+=STRING (',' ecl+=STRING)*)?
		public Group getGroup_4() { return cGroup_4; }

		//'ecl'
		public Keyword getEclKeyword_4_0() { return cEclKeyword_4_0; }

		//ecl+=STRING
		public Assignment getEclAssignment_4_1() { return cEclAssignment_4_1; }

		//STRING
		public RuleCall getEclSTRINGTerminalRuleCall_4_1_0() { return cEclSTRINGTerminalRuleCall_4_1_0; }

		//(',' ecl+=STRING)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//ecl+=STRING
		public Assignment getEclAssignment_4_2_1() { return cEclAssignment_4_2_1; }

		//STRING
		public RuleCall getEclSTRINGTerminalRuleCall_4_2_1_0() { return cEclSTRINGTerminalRuleCall_4_2_1_0; }

		//('xmof' xmof=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//'xmof'
		public Keyword getXmofKeyword_5_0() { return cXmofKeyword_5_0; }

		//xmof=STRING
		public Assignment getXmofAssignment_5_1() { return cXmofAssignment_5_1; }

		//STRING
		public RuleCall getXmofSTRINGTerminalRuleCall_5_1_0() { return cXmofSTRINGTerminalRuleCall_5_1_0; }

		//('fileExtension' fileExtension=STRING)?
		public Group getGroup_6() { return cGroup_6; }

		//'fileExtension'
		public Keyword getFileExtensionKeyword_6_0() { return cFileExtensionKeyword_6_0; }

		//fileExtension=STRING
		public Assignment getFileExtensionAssignment_6_1() { return cFileExtensionAssignment_6_1; }

		//STRING
		public RuleCall getFileExtensionSTRINGTerminalRuleCall_6_1_0() { return cFileExtensionSTRINGTerminalRuleCall_6_1_0; }

		//('exactType' exactTypeName=ValidID (=> 'uri' exactTypeUri=STRING)?)?
		public Group getGroup_7() { return cGroup_7; }

		//'exactType'
		public Keyword getExactTypeKeyword_7_0() { return cExactTypeKeyword_7_0; }

		//exactTypeName=ValidID
		public Assignment getExactTypeNameAssignment_7_1() { return cExactTypeNameAssignment_7_1; }

		//ValidID
		public RuleCall getExactTypeNameValidIDParserRuleCall_7_1_0() { return cExactTypeNameValidIDParserRuleCall_7_1_0; }

		//(=> 'uri' exactTypeUri=STRING)?
		public Group getGroup_7_2() { return cGroup_7_2; }

		//=> 'uri'
		public Keyword getUriKeyword_7_2_0() { return cUriKeyword_7_2_0; }

		//exactTypeUri=STRING
		public Assignment getExactTypeUriAssignment_7_2_1() { return cExactTypeUriAssignment_7_2_1; }

		//STRING
		public RuleCall getExactTypeUriSTRINGTerminalRuleCall_7_2_1_0() { return cExactTypeUriSTRINGTerminalRuleCall_7_2_1_0; }

		//annotations+=Annotation* '}'
		public Group getGroup_8() { return cGroup_8; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_8_0() { return cAnnotationsAssignment_8_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_8_0_0() { return cAnnotationsAnnotationParserRuleCall_8_0_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_8_1() { return cRightCurlyBracketKeyword_8_1; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.melange.Melange.Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnnotationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeySTRINGTerminalRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Annotation:
		//	'annotation' key=STRING ":" value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//'annotation' key=STRING ":" value=STRING
		public Group getGroup() { return cGroup; }

		//'annotation'
		public Keyword getAnnotationKeyword_0() { return cAnnotationKeyword_0; }

		//key=STRING
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }

		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_1_0() { return cKeySTRINGTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
	}

	public class ExternalLanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.melange.Melange.ExternalLanguage");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cLanguageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cImplementsKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cImplementsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final CrossReference cImplementsModelTypeCrossReference_0_2_1_0 = (CrossReference)cImplementsAssignment_0_2_1.eContents().get(0);
		private final RuleCall cImplementsModelTypeQualifiedNameParserRuleCall_0_2_1_0_1 = (RuleCall)cImplementsModelTypeCrossReference_0_2_1_0.eContents().get(1);
		private final Group cGroup_0_2_2 = (Group)cGroup_0_2.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_2_0 = (Keyword)cGroup_0_2_2.eContents().get(0);
		private final Assignment cImplementsAssignment_0_2_2_1 = (Assignment)cGroup_0_2_2.eContents().get(1);
		private final CrossReference cImplementsModelTypeCrossReference_0_2_2_1_0 = (CrossReference)cImplementsAssignment_0_2_2_1.eContents().get(0);
		private final RuleCall cImplementsModelTypeQualifiedNameParserRuleCall_0_2_2_1_0_1 = (RuleCall)cImplementsModelTypeCrossReference_0_2_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cOperatorsAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cOperatorsExternalImportParserRuleCall_0_4_0 = (RuleCall)cOperatorsAssignment_0_4.eContents().get(0);
		private final Assignment cOperatorsAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cOperatorsWeaveParserRuleCall_1_0 = (RuleCall)cOperatorsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cXtextKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cXtextAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cXtextSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cXtextAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cXtextAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cXtextSTRINGTerminalRuleCall_2_2_1_0 = (RuleCall)cXtextAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Keyword cSiriusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSiriusAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSiriusSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cSiriusAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cSiriusAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cSiriusSTRINGTerminalRuleCall_3_2_1_0 = (RuleCall)cSiriusAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cUnorderedGroup.eContents().get(4);
		private final Keyword cEclKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEclAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEclSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cEclAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cEclAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cEclSTRINGTerminalRuleCall_4_2_1_0 = (RuleCall)cEclAssignment_4_2_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cUnorderedGroup.eContents().get(5);
		private final Keyword cXmofKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cXmofAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cXmofSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cXmofAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cUnorderedGroup.eContents().get(6);
		private final Keyword cFileExtensionKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cFileExtensionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cFileExtensionSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cFileExtensionAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cUnorderedGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cGroup_7.eContents().get(0);
		private final Keyword cExactTypeKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Assignment cExactTypeNameAssignment_7_0_1 = (Assignment)cGroup_7_0.eContents().get(1);
		private final RuleCall cExactTypeNameValidIDParserRuleCall_7_0_1_0 = (RuleCall)cExactTypeNameAssignment_7_0_1.eContents().get(0);
		private final Group cGroup_7_0_2 = (Group)cGroup_7_0.eContents().get(2);
		private final Keyword cUriKeyword_7_0_2_0 = (Keyword)cGroup_7_0_2.eContents().get(0);
		private final Assignment cExactTypeUriAssignment_7_0_2_1 = (Assignment)cGroup_7_0_2.eContents().get(1);
		private final RuleCall cExactTypeUriSTRINGTerminalRuleCall_7_0_2_1_0 = (RuleCall)cExactTypeUriAssignment_7_0_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		
		//ExternalLanguage:
		//	'language' name=ValidID ('implements' implements+=[ModelType|QualifiedName] (','
		//	implements+=[ModelType|QualifiedName])*)?
		//	'{'
		//	operators+=ExternalImport & operators+=Weave* & ('xtext' xtext+=STRING (',' xtext+=STRING)*)? & ('sirius'
		//	sirius+=STRING (',' sirius+=STRING)*)? & ('ecl' ecl+=STRING (',' ecl+=STRING)*)? & ('xmof' xmof=STRING)? &
		//	('fileExtension' fileExtension=STRING)? & ('exactType' exactTypeName=ValidID (=> 'uri' exactTypeUri=STRING)?)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'language' name=ValidID ('implements' implements+=[ModelType|QualifiedName] (','
		//implements+=[ModelType|QualifiedName])*)? '{' operators+=ExternalImport & operators+=Weave* & ('xtext' xtext+=STRING
		//(',' xtext+=STRING)*)? & ('sirius' sirius+=STRING (',' sirius+=STRING)*)? & ('ecl' ecl+=STRING (',' ecl+=STRING)*)? &
		//('xmof' xmof=STRING)? & ('fileExtension' fileExtension=STRING)? & ('exactType' exactTypeName=ValidID (=> 'uri'
		//exactTypeUri=STRING)?)? '}'
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//'language' name=ValidID ('implements' implements+=[ModelType|QualifiedName] (','
		//implements+=[ModelType|QualifiedName])*)? '{' operators+=ExternalImport
		public Group getGroup_0() { return cGroup_0; }

		//'language'
		public Keyword getLanguageKeyword_0_0() { return cLanguageKeyword_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_1_0() { return cNameValidIDParserRuleCall_0_1_0; }

		//('implements' implements+=[ModelType|QualifiedName] (',' implements+=[ModelType|QualifiedName])*)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//'implements'
		public Keyword getImplementsKeyword_0_2_0() { return cImplementsKeyword_0_2_0; }

		//implements+=[ModelType|QualifiedName]
		public Assignment getImplementsAssignment_0_2_1() { return cImplementsAssignment_0_2_1; }

		//[ModelType|QualifiedName]
		public CrossReference getImplementsModelTypeCrossReference_0_2_1_0() { return cImplementsModelTypeCrossReference_0_2_1_0; }

		//QualifiedName
		public RuleCall getImplementsModelTypeQualifiedNameParserRuleCall_0_2_1_0_1() { return cImplementsModelTypeQualifiedNameParserRuleCall_0_2_1_0_1; }

		//(',' implements+=[ModelType|QualifiedName])*
		public Group getGroup_0_2_2() { return cGroup_0_2_2; }

		//','
		public Keyword getCommaKeyword_0_2_2_0() { return cCommaKeyword_0_2_2_0; }

		//implements+=[ModelType|QualifiedName]
		public Assignment getImplementsAssignment_0_2_2_1() { return cImplementsAssignment_0_2_2_1; }

		//[ModelType|QualifiedName]
		public CrossReference getImplementsModelTypeCrossReference_0_2_2_1_0() { return cImplementsModelTypeCrossReference_0_2_2_1_0; }

		//QualifiedName
		public RuleCall getImplementsModelTypeQualifiedNameParserRuleCall_0_2_2_1_0_1() { return cImplementsModelTypeQualifiedNameParserRuleCall_0_2_2_1_0_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_3() { return cLeftCurlyBracketKeyword_0_3; }

		//operators+=ExternalImport
		public Assignment getOperatorsAssignment_0_4() { return cOperatorsAssignment_0_4; }

		//ExternalImport
		public RuleCall getOperatorsExternalImportParserRuleCall_0_4_0() { return cOperatorsExternalImportParserRuleCall_0_4_0; }

		//operators+=Weave*
		public Assignment getOperatorsAssignment_1() { return cOperatorsAssignment_1; }

		//Weave
		public RuleCall getOperatorsWeaveParserRuleCall_1_0() { return cOperatorsWeaveParserRuleCall_1_0; }

		//('xtext' xtext+=STRING (',' xtext+=STRING)*)?
		public Group getGroup_2() { return cGroup_2; }

		//'xtext'
		public Keyword getXtextKeyword_2_0() { return cXtextKeyword_2_0; }

		//xtext+=STRING
		public Assignment getXtextAssignment_2_1() { return cXtextAssignment_2_1; }

		//STRING
		public RuleCall getXtextSTRINGTerminalRuleCall_2_1_0() { return cXtextSTRINGTerminalRuleCall_2_1_0; }

		//(',' xtext+=STRING)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//xtext+=STRING
		public Assignment getXtextAssignment_2_2_1() { return cXtextAssignment_2_2_1; }

		//STRING
		public RuleCall getXtextSTRINGTerminalRuleCall_2_2_1_0() { return cXtextSTRINGTerminalRuleCall_2_2_1_0; }

		//('sirius' sirius+=STRING (',' sirius+=STRING)*)?
		public Group getGroup_3() { return cGroup_3; }

		//'sirius'
		public Keyword getSiriusKeyword_3_0() { return cSiriusKeyword_3_0; }

		//sirius+=STRING
		public Assignment getSiriusAssignment_3_1() { return cSiriusAssignment_3_1; }

		//STRING
		public RuleCall getSiriusSTRINGTerminalRuleCall_3_1_0() { return cSiriusSTRINGTerminalRuleCall_3_1_0; }

		//(',' sirius+=STRING)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//sirius+=STRING
		public Assignment getSiriusAssignment_3_2_1() { return cSiriusAssignment_3_2_1; }

		//STRING
		public RuleCall getSiriusSTRINGTerminalRuleCall_3_2_1_0() { return cSiriusSTRINGTerminalRuleCall_3_2_1_0; }

		//('ecl' ecl+=STRING (',' ecl+=STRING)*)?
		public Group getGroup_4() { return cGroup_4; }

		//'ecl'
		public Keyword getEclKeyword_4_0() { return cEclKeyword_4_0; }

		//ecl+=STRING
		public Assignment getEclAssignment_4_1() { return cEclAssignment_4_1; }

		//STRING
		public RuleCall getEclSTRINGTerminalRuleCall_4_1_0() { return cEclSTRINGTerminalRuleCall_4_1_0; }

		//(',' ecl+=STRING)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//ecl+=STRING
		public Assignment getEclAssignment_4_2_1() { return cEclAssignment_4_2_1; }

		//STRING
		public RuleCall getEclSTRINGTerminalRuleCall_4_2_1_0() { return cEclSTRINGTerminalRuleCall_4_2_1_0; }

		//('xmof' xmof=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//'xmof'
		public Keyword getXmofKeyword_5_0() { return cXmofKeyword_5_0; }

		//xmof=STRING
		public Assignment getXmofAssignment_5_1() { return cXmofAssignment_5_1; }

		//STRING
		public RuleCall getXmofSTRINGTerminalRuleCall_5_1_0() { return cXmofSTRINGTerminalRuleCall_5_1_0; }

		//('fileExtension' fileExtension=STRING)?
		public Group getGroup_6() { return cGroup_6; }

		//'fileExtension'
		public Keyword getFileExtensionKeyword_6_0() { return cFileExtensionKeyword_6_0; }

		//fileExtension=STRING
		public Assignment getFileExtensionAssignment_6_1() { return cFileExtensionAssignment_6_1; }

		//STRING
		public RuleCall getFileExtensionSTRINGTerminalRuleCall_6_1_0() { return cFileExtensionSTRINGTerminalRuleCall_6_1_0; }

		//('exactType' exactTypeName=ValidID (=> 'uri' exactTypeUri=STRING)?)? '}'
		public Group getGroup_7() { return cGroup_7; }

		//('exactType' exactTypeName=ValidID (=> 'uri' exactTypeUri=STRING)?)?
		public Group getGroup_7_0() { return cGroup_7_0; }

		//'exactType'
		public Keyword getExactTypeKeyword_7_0_0() { return cExactTypeKeyword_7_0_0; }

		//exactTypeName=ValidID
		public Assignment getExactTypeNameAssignment_7_0_1() { return cExactTypeNameAssignment_7_0_1; }

		//ValidID
		public RuleCall getExactTypeNameValidIDParserRuleCall_7_0_1_0() { return cExactTypeNameValidIDParserRuleCall_7_0_1_0; }

		//(=> 'uri' exactTypeUri=STRING)?
		public Group getGroup_7_0_2() { return cGroup_7_0_2; }

		//=> 'uri'
		public Keyword getUriKeyword_7_0_2_0() { return cUriKeyword_7_0_2_0; }

		//exactTypeUri=STRING
		public Assignment getExactTypeUriAssignment_7_0_2_1() { return cExactTypeUriAssignment_7_0_2_1; }

		//STRING
		public RuleCall getExactTypeUriSTRINGTerminalRuleCall_7_0_2_1_0() { return cExactTypeUriSTRINGTerminalRuleCall_7_0_2_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7_1() { return cRightCurlyBracketKeyword_7_1; }
	}

	public class EcoreModelTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.melange.Melange.EcoreModelType");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cModeltypeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cSyntaxKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cEcoreUriAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cEcoreUriSTRINGTerminalRuleCall_0_4_0 = (RuleCall)cEcoreUriAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cUriKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cMtUriAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cMtUriSTRINGTerminalRuleCall_1_0_1_0 = (RuleCall)cMtUriAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//EcoreModelType ModelType:
		//	'modeltype' name=ValidID '{'
		//	'syntax' ecoreUri=STRING & ('uri' mtUri=STRING)?
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//'modeltype' name=ValidID '{' 'syntax' ecoreUri=STRING & ('uri' mtUri=STRING)? '}'
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//'modeltype' name=ValidID '{' 'syntax' ecoreUri=STRING
		public Group getGroup_0() { return cGroup_0; }

		//'modeltype'
		public Keyword getModeltypeKeyword_0_0() { return cModeltypeKeyword_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_1_0() { return cNameValidIDParserRuleCall_0_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }

		//'syntax'
		public Keyword getSyntaxKeyword_0_3() { return cSyntaxKeyword_0_3; }

		//ecoreUri=STRING
		public Assignment getEcoreUriAssignment_0_4() { return cEcoreUriAssignment_0_4; }

		//STRING
		public RuleCall getEcoreUriSTRINGTerminalRuleCall_0_4_0() { return cEcoreUriSTRINGTerminalRuleCall_0_4_0; }

		//('uri' mtUri=STRING)? '}'
		public Group getGroup_1() { return cGroup_1; }

		//('uri' mtUri=STRING)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//'uri'
		public Keyword getUriKeyword_1_0_0() { return cUriKeyword_1_0_0; }

		//mtUri=STRING
		public Assignment getMtUriAssignment_1_0_1() { return cMtUriAssignment_1_0_1; }

		//STRING
		public RuleCall getMtUriSTRINGTerminalRuleCall_1_0_1_0() { return cMtUriSTRINGTerminalRuleCall_1_0_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1() { return cRightCurlyBracketKeyword_1_1; }
	}

	public class XbaseTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.melange.Melange.XbaseTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMainAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cMainMainKeyword_0_0 = (Keyword)cMainAssignment_0.eContents().get(0);
		private final Keyword cTransformationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReturnTypeRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReturnTypeRefJvmTypeReferenceParserRuleCall_2_0 = (RuleCall)cReturnTypeRefAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParametersAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParametersFullJvmFormalParameterParserRuleCall_5_0_0 = (RuleCall)cParametersAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParametersFullJvmFormalParameterParserRuleCall_5_1_1_0 = (RuleCall)cParametersAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		
		//XbaseTransformation:
		//	main?='@Main'?
		//	'transformation' returnTypeRef=JvmTypeReference? name=ValidID
		//	'(' (parameters+=FullJvmFormalParameter (',' parameters+=FullJvmFormalParameter)*)? ')'
		//	body=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }

		//main?='@Main'? 'transformation' returnTypeRef=JvmTypeReference? name=ValidID '(' (parameters+=FullJvmFormalParameter
		//(',' parameters+=FullJvmFormalParameter)*)? ')' body=XBlockExpression
		public Group getGroup() { return cGroup; }

		//main?='@Main'?
		public Assignment getMainAssignment_0() { return cMainAssignment_0; }

		//'@Main'
		public Keyword getMainMainKeyword_0_0() { return cMainMainKeyword_0_0; }

		//'transformation'
		public Keyword getTransformationKeyword_1() { return cTransformationKeyword_1; }

		//returnTypeRef=JvmTypeReference?
		public Assignment getReturnTypeRefAssignment_2() { return cReturnTypeRefAssignment_2; }

		//JvmTypeReference
		public RuleCall getReturnTypeRefJvmTypeReferenceParserRuleCall_2_0() { return cReturnTypeRefJvmTypeReferenceParserRuleCall_2_0; }

		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(parameters+=FullJvmFormalParameter (',' parameters+=FullJvmFormalParameter)*)?
		public Group getGroup_5() { return cGroup_5; }

		//parameters+=FullJvmFormalParameter
		public Assignment getParametersAssignment_5_0() { return cParametersAssignment_5_0; }

		//FullJvmFormalParameter
		public RuleCall getParametersFullJvmFormalParameterParserRuleCall_5_0_0() { return cParametersFullJvmFormalParameterParserRuleCall_5_0_0; }

		//(',' parameters+=FullJvmFormalParameter)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//parameters+=FullJvmFormalParameter
		public Assignment getParametersAssignment_5_1_1() { return cParametersAssignment_5_1_1; }

		//FullJvmFormalParameter
		public RuleCall getParametersFullJvmFormalParameterParserRuleCall_5_1_1_0() { return cParametersFullJvmFormalParameterParserRuleCall_5_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//body=XBlockExpression
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }

		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_7_0() { return cBodyXBlockExpressionParserRuleCall_7_0; }
	}

	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.melange.Melange.Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFromLanguageCrossReference_1_0 = (CrossReference)cFromAssignment_1.eContents().get(0);
		private final RuleCall cFromLanguageQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cFromLanguageCrossReference_1_0.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cToModelTypeCrossReference_3_0 = (CrossReference)cToAssignment_3.eContents().get(0);
		private final RuleCall cToModelTypeQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cToModelTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRulesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRulesClassMappingParserRuleCall_5_0 = (RuleCall)cRulesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////KomprenSlicer:
		////	slicer = Slicer
		////;
		//Mapping:
		//	"map" from=[Language|QualifiedName] "to" to=[ModelType|QualifiedName] "{"
		//	rules+=ClassMapping*
		//	"}";
		@Override public ParserRule getRule() { return rule; }

		//"map" from=[Language|QualifiedName] "to" to=[ModelType|QualifiedName] "{" rules+=ClassMapping* "}"
		public Group getGroup() { return cGroup; }

		//"map"
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }

		//from=[Language|QualifiedName]
		public Assignment getFromAssignment_1() { return cFromAssignment_1; }

		//[Language|QualifiedName]
		public CrossReference getFromLanguageCrossReference_1_0() { return cFromLanguageCrossReference_1_0; }

		//QualifiedName
		public RuleCall getFromLanguageQualifiedNameParserRuleCall_1_0_1() { return cFromLanguageQualifiedNameParserRuleCall_1_0_1; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//to=[ModelType|QualifiedName]
		public Assignment getToAssignment_3() { return cToAssignment_3; }

		//[ModelType|QualifiedName]
		public CrossReference getToModelTypeCrossReference_3_0() { return cToModelTypeCrossReference_3_0; }

		//QualifiedName
		public RuleCall getToModelTypeQualifiedNameParserRuleCall_3_0_1() { return cToModelTypeQualifiedNameParserRuleCall_3_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//rules+=ClassMapping*
		public Assignment getRulesAssignment_5() { return cRulesAssignment_5; }

		//ClassMapping
		public RuleCall getRulesClassMappingParserRuleCall_5_0() { return cRulesClassMappingParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class PackageMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.melange.Melange.PackageMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFromSTRINGTerminalRuleCall_0_0 = (RuleCall)cFromAssignment_0.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cToSTRINGTerminalRuleCall_2_0 = (RuleCall)cToAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cClassesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cClassesClassMappingParserRuleCall_3_1_0 = (RuleCall)cClassesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//PackageMapping PackageBinding:
		//	from=STRING "to" to=STRING ("{"
		//	classes+=ClassMapping*
		//	"}")?
		@Override public ParserRule getRule() { return rule; }

		//from=STRING "to" to=STRING ("{" classes+=ClassMapping* "}")?
		public Group getGroup() { return cGroup; }

		//from=STRING
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }

		//STRING
		public RuleCall getFromSTRINGTerminalRuleCall_0_0() { return cFromSTRINGTerminalRuleCall_0_0; }

		//"to"
		public Keyword getToKeyword_1() { return cToKeyword_1; }

		//to=STRING
		public Assignment getToAssignment_2() { return cToAssignment_2; }

		//STRING
		public RuleCall getToSTRINGTerminalRuleCall_2_0() { return cToSTRINGTerminalRuleCall_2_0; }

		//("{" classes+=ClassMapping* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//classes+=ClassMapping*
		public Assignment getClassesAssignment_3_1() { return cClassesAssignment_3_1; }

		//ClassMapping
		public RuleCall getClassesClassMappingParserRuleCall_3_1_0() { return cClassesClassMappingParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class ClassMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.melange.Melange.ClassMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFromSTRINGTerminalRuleCall_0_0 = (RuleCall)cFromAssignment_0.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cToSTRINGTerminalRuleCall_2_0 = (RuleCall)cToAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPropertiesPropertyMappingParserRuleCall_3_1_0 = (RuleCall)cPropertiesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//ClassMapping ClassBinding:
		//	from=STRING "to" to=STRING ("{"
		//	properties+=PropertyMapping*
		//	"}")?
		@Override public ParserRule getRule() { return rule; }

		//from=STRING "to" to=STRING ("{" properties+=PropertyMapping* "}")?
		public Group getGroup() { return cGroup; }

		//from=STRING
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }

		//STRING
		public RuleCall getFromSTRINGTerminalRuleCall_0_0() { return cFromSTRINGTerminalRuleCall_0_0; }

		//"to"
		public Keyword getToKeyword_1() { return cToKeyword_1; }

		//to=STRING
		public Assignment getToAssignment_2() { return cToAssignment_2; }

		//STRING
		public RuleCall getToSTRINGTerminalRuleCall_2_0() { return cToSTRINGTerminalRuleCall_2_0; }

		//("{" properties+=PropertyMapping* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//properties+=PropertyMapping*
		public Assignment getPropertiesAssignment_3_1() { return cPropertiesAssignment_3_1; }

		//PropertyMapping
		public RuleCall getPropertiesPropertyMappingParserRuleCall_3_1_0() { return cPropertiesPropertyMappingParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class PropertyMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.melange.Melange.PropertyMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFromSTRINGTerminalRuleCall_0_0 = (RuleCall)cFromAssignment_0.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cToSTRINGTerminalRuleCall_2_0 = (RuleCall)cToAssignment_2.eContents().get(0);
		
		//PropertyMapping PropertyBinding:
		//	from=STRING "to" to=STRING
		@Override public ParserRule getRule() { return rule; }

		//from=STRING "to" to=STRING
		public Group getGroup() { return cGroup; }

		//from=STRING
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }

		//STRING
		public RuleCall getFromSTRINGTerminalRuleCall_0_0() { return cFromSTRINGTerminalRuleCall_0_0; }

		//"to"
		public Keyword getToKeyword_1() { return cToKeyword_1; }

		//to=STRING
		public Assignment getToAssignment_2() { return cToAssignment_2; }

		//STRING
		public RuleCall getToSTRINGTerminalRuleCall_2_0() { return cToSTRINGTerminalRuleCall_2_0; }
	}

	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.melange.Melange.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMergeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSliceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWeaveParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Operator:
		//	Import | Merge | Slice | Weave;
		@Override public ParserRule getRule() { return rule; }

		//Import | Merge | Slice | Weave
		public Alternatives getAlternatives() { return cAlternatives; }

		//Import
		public RuleCall getImportParserRuleCall_0() { return cImportParserRuleCall_0; }

		//Merge
		public RuleCall getMergeParserRuleCall_1() { return cMergeParserRuleCall_1; }

		//Slice
		public RuleCall getSliceParserRuleCall_2() { return cSliceParserRuleCall_2; }

		//Weave
		public RuleCall getWeaveParserRuleCall_3() { return cWeaveParserRuleCall_3; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.melange.Melange.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSyntaxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEcoreUriAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEcoreUriSTRINGTerminalRuleCall_1_0 = (RuleCall)cEcoreUriAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithGenmodelKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cGenmodelUrisAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cGenmodelUrisSTRINGTerminalRuleCall_2_1_0_0 = (RuleCall)cGenmodelUrisAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cGenmodelUrisAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cGenmodelUrisSTRINGTerminalRuleCall_2_1_1_1_0 = (RuleCall)cGenmodelUrisAssignment_2_1_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRenamingKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cMappingRulesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cMappingRulesPackageMappingParserRuleCall_3_2_0 = (RuleCall)cMappingRulesAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//Import:
		//	'syntax' ecoreUri=STRING ('withGenmodel' (genmodelUris+=STRING (',' genmodelUris+=STRING)*))? ('renaming' '{'
		//	mappingRules+=PackageMapping*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }

		//'syntax' ecoreUri=STRING ('withGenmodel' (genmodelUris+=STRING (',' genmodelUris+=STRING)*))? ('renaming' '{'
		//mappingRules+=PackageMapping* '}')?
		public Group getGroup() { return cGroup; }

		//'syntax'
		public Keyword getSyntaxKeyword_0() { return cSyntaxKeyword_0; }

		//ecoreUri=STRING
		public Assignment getEcoreUriAssignment_1() { return cEcoreUriAssignment_1; }

		//STRING
		public RuleCall getEcoreUriSTRINGTerminalRuleCall_1_0() { return cEcoreUriSTRINGTerminalRuleCall_1_0; }

		//('withGenmodel' (genmodelUris+=STRING (',' genmodelUris+=STRING)*))?
		public Group getGroup_2() { return cGroup_2; }

		//'withGenmodel'
		public Keyword getWithGenmodelKeyword_2_0() { return cWithGenmodelKeyword_2_0; }

		//(genmodelUris+=STRING (',' genmodelUris+=STRING)*)
		public Group getGroup_2_1() { return cGroup_2_1; }

		//genmodelUris+=STRING
		public Assignment getGenmodelUrisAssignment_2_1_0() { return cGenmodelUrisAssignment_2_1_0; }

		//STRING
		public RuleCall getGenmodelUrisSTRINGTerminalRuleCall_2_1_0_0() { return cGenmodelUrisSTRINGTerminalRuleCall_2_1_0_0; }

		//(',' genmodelUris+=STRING)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//genmodelUris+=STRING
		public Assignment getGenmodelUrisAssignment_2_1_1_1() { return cGenmodelUrisAssignment_2_1_1_1; }

		//STRING
		public RuleCall getGenmodelUrisSTRINGTerminalRuleCall_2_1_1_1_0() { return cGenmodelUrisSTRINGTerminalRuleCall_2_1_1_1_0; }

		//('renaming' '{' mappingRules+=PackageMapping* '}')?
		public Group getGroup_3() { return cGroup_3; }

		//'renaming'
		public Keyword getRenamingKeyword_3_0() { return cRenamingKeyword_3_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//mappingRules+=PackageMapping*
		public Assignment getMappingRulesAssignment_3_2() { return cMappingRulesAssignment_3_2; }

		//PackageMapping
		public RuleCall getMappingRulesPackageMappingParserRuleCall_3_2_0() { return cMappingRulesPackageMappingParserRuleCall_3_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}

	public class ExternalImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.melange.Melange.ExternalImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSyntaxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEcoreUriAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEcoreUriSTRINGTerminalRuleCall_1_0 = (RuleCall)cEcoreUriAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithGenmodelKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cGenmodelUrisAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cGenmodelUrisSTRINGTerminalRuleCall_2_1_0_0 = (RuleCall)cGenmodelUrisAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cGenmodelUrisAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cGenmodelUrisSTRINGTerminalRuleCall_2_1_1_1_0 = (RuleCall)cGenmodelUrisAssignment_2_1_1_1.eContents().get(0);
		
		//ExternalImport Import:
		//	'syntax' ecoreUri=STRING ('withGenmodel' (genmodelUris+=STRING (',' genmodelUris+=STRING)*))?
		@Override public ParserRule getRule() { return rule; }

		//'syntax' ecoreUri=STRING ('withGenmodel' (genmodelUris+=STRING (',' genmodelUris+=STRING)*))?
		public Group getGroup() { return cGroup; }

		//'syntax'
		public Keyword getSyntaxKeyword_0() { return cSyntaxKeyword_0; }

		//ecoreUri=STRING
		public Assignment getEcoreUriAssignment_1() { return cEcoreUriAssignment_1; }

		//STRING
		public RuleCall getEcoreUriSTRINGTerminalRuleCall_1_0() { return cEcoreUriSTRINGTerminalRuleCall_1_0; }

		//('withGenmodel' (genmodelUris+=STRING (',' genmodelUris+=STRING)*))?
		public Group getGroup_2() { return cGroup_2; }

		//'withGenmodel'
		public Keyword getWithGenmodelKeyword_2_0() { return cWithGenmodelKeyword_2_0; }

		//(genmodelUris+=STRING (',' genmodelUris+=STRING)*)
		public Group getGroup_2_1() { return cGroup_2_1; }

		//genmodelUris+=STRING
		public Assignment getGenmodelUrisAssignment_2_1_0() { return cGenmodelUrisAssignment_2_1_0; }

		//STRING
		public RuleCall getGenmodelUrisSTRINGTerminalRuleCall_2_1_0_0() { return cGenmodelUrisSTRINGTerminalRuleCall_2_1_0_0; }

		//(',' genmodelUris+=STRING)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//genmodelUris+=STRING
		public Assignment getGenmodelUrisAssignment_2_1_1_1() { return cGenmodelUrisAssignment_2_1_1_1; }

		//STRING
		public RuleCall getGenmodelUrisSTRINGTerminalRuleCall_2_1_1_1_0() { return cGenmodelUrisSTRINGTerminalRuleCall_2_1_1_1_0; }
	}

	public class MergeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.melange.Melange.Merge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMergeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetLanguageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetLanguageLanguageCrossReference_1_0 = (CrossReference)cTargetLanguageAssignment_1.eContents().get(0);
		private final RuleCall cTargetLanguageLanguageQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTargetLanguageLanguageCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cRenamingKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cMappingRulesAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cMappingRulesPackageMappingParserRuleCall_2_2_0 = (RuleCall)cMappingRulesAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Merge:
		//	'merge' targetLanguage=[Language|QualifiedName] ('renaming' '{'
		//	mappingRules+=PackageMapping*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }

		//'merge' targetLanguage=[Language|QualifiedName] ('renaming' '{' mappingRules+=PackageMapping* '}')?
		public Group getGroup() { return cGroup; }

		//'merge'
		public Keyword getMergeKeyword_0() { return cMergeKeyword_0; }

		//targetLanguage=[Language|QualifiedName]
		public Assignment getTargetLanguageAssignment_1() { return cTargetLanguageAssignment_1; }

		//[Language|QualifiedName]
		public CrossReference getTargetLanguageLanguageCrossReference_1_0() { return cTargetLanguageLanguageCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTargetLanguageLanguageQualifiedNameParserRuleCall_1_0_1() { return cTargetLanguageLanguageQualifiedNameParserRuleCall_1_0_1; }

		//('renaming' '{' mappingRules+=PackageMapping* '}')?
		public Group getGroup_2() { return cGroup_2; }

		//'renaming'
		public Keyword getRenamingKeyword_2_0() { return cRenamingKeyword_2_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }

		//mappingRules+=PackageMapping*
		public Assignment getMappingRulesAssignment_2_2() { return cMappingRulesAssignment_2_2; }

		//PackageMapping
		public RuleCall getMappingRulesPackageMappingParserRuleCall_2_2_0() { return cMappingRulesPackageMappingParserRuleCall_2_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
	}

	public class SliceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.melange.Melange.Slice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSliceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetLanguageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetLanguageLanguageCrossReference_1_0 = (CrossReference)cTargetLanguageAssignment_1.eContents().get(0);
		private final RuleCall cTargetLanguageLanguageQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTargetLanguageLanguageCrossReference_1_0.eContents().get(1);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRootsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRootsSTRINGTerminalRuleCall_4_0 = (RuleCall)cRootsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRootsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRootsSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cRootsAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cRenamingKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cMappingRulesAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cMappingRulesPackageMappingParserRuleCall_7_2_0 = (RuleCall)cMappingRulesAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//Slice:
		//	'slice' targetLanguage=[Language|QualifiedName] 'on' '[' roots+=STRING (',' roots+=STRING)* ']' ('renaming' '{'
		//	mappingRules+=PackageMapping*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }

		//'slice' targetLanguage=[Language|QualifiedName] 'on' '[' roots+=STRING (',' roots+=STRING)* ']' ('renaming' '{'
		//mappingRules+=PackageMapping* '}')?
		public Group getGroup() { return cGroup; }

		//'slice'
		public Keyword getSliceKeyword_0() { return cSliceKeyword_0; }

		//targetLanguage=[Language|QualifiedName]
		public Assignment getTargetLanguageAssignment_1() { return cTargetLanguageAssignment_1; }

		//[Language|QualifiedName]
		public CrossReference getTargetLanguageLanguageCrossReference_1_0() { return cTargetLanguageLanguageCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTargetLanguageLanguageQualifiedNameParserRuleCall_1_0_1() { return cTargetLanguageLanguageQualifiedNameParserRuleCall_1_0_1; }

		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }

		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//roots+=STRING
		public Assignment getRootsAssignment_4() { return cRootsAssignment_4; }

		//STRING
		public RuleCall getRootsSTRINGTerminalRuleCall_4_0() { return cRootsSTRINGTerminalRuleCall_4_0; }

		//(',' roots+=STRING)*
		public Group getGroup_5() { return cGroup_5; }

		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//roots+=STRING
		public Assignment getRootsAssignment_5_1() { return cRootsAssignment_5_1; }

		//STRING
		public RuleCall getRootsSTRINGTerminalRuleCall_5_1_0() { return cRootsSTRINGTerminalRuleCall_5_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }

		//('renaming' '{' mappingRules+=PackageMapping* '}')?
		public Group getGroup_7() { return cGroup_7; }

		//'renaming'
		public Keyword getRenamingKeyword_7_0() { return cRenamingKeyword_7_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }

		//mappingRules+=PackageMapping*
		public Assignment getMappingRulesAssignment_7_2() { return cMappingRulesAssignment_7_2; }

		//PackageMapping
		public RuleCall getMappingRulesPackageMappingParserRuleCall_7_2_0() { return cMappingRulesPackageMappingParserRuleCall_7_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}

	public class InheritElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.melange.Melange.Inherit");
		private final Assignment cTargetLanguageAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTargetLanguageLanguageCrossReference_0 = (CrossReference)cTargetLanguageAssignment.eContents().get(0);
		private final RuleCall cTargetLanguageLanguageQualifiedNameParserRuleCall_0_1 = (RuleCall)cTargetLanguageLanguageCrossReference_0.eContents().get(1);
		
		//Inherit Inheritance:
		//	targetLanguage=[Language|QualifiedName]
		@Override public ParserRule getRule() { return rule; }

		//targetLanguage=[Language|QualifiedName]
		public Assignment getTargetLanguageAssignment() { return cTargetLanguageAssignment; }

		//[Language|QualifiedName]
		public CrossReference getTargetLanguageLanguageCrossReference_0() { return cTargetLanguageLanguageCrossReference_0; }

		//QualifiedName
		public RuleCall getTargetLanguageLanguageQualifiedNameParserRuleCall_0_1() { return cTargetLanguageLanguageQualifiedNameParserRuleCall_0_1; }
	}

	public class WeaveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.melange.Melange.Weave");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAspectTypeRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAspectWildcardParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Weave:
		//	AspectTypeRef | AspectWildcard;
		@Override public ParserRule getRule() { return rule; }

		//AspectTypeRef | AspectWildcard
		public Alternatives getAlternatives() { return cAlternatives; }

		//AspectTypeRef
		public RuleCall getAspectTypeRefParserRuleCall_0() { return cAspectTypeRefParserRuleCall_0; }

		//AspectWildcard
		public RuleCall getAspectWildcardParserRuleCall_1() { return cAspectWildcardParserRuleCall_1; }
	}

	public class AspectTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.melange.Melange.AspectTypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAspectTypeRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAspectTypeRefJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cAspectTypeRefAssignment_1.eContents().get(0);
		
		//AspectTypeRef Weave:
		//	'with' aspectTypeRef=JvmTypeReference
		@Override public ParserRule getRule() { return rule; }

		//'with' aspectTypeRef=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//'with'
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }

		//aspectTypeRef=JvmTypeReference
		public Assignment getAspectTypeRefAssignment_1() { return cAspectTypeRefAssignment_1; }

		//JvmTypeReference
		public RuleCall getAspectTypeRefJvmTypeReferenceParserRuleCall_1_0() { return cAspectTypeRefJvmTypeReferenceParserRuleCall_1_0; }
	}

	public class AspectWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.melange.Melange.AspectWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAspectWildcardImportAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAspectWildcardImportQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cAspectWildcardImportAssignment_1.eContents().get(0);
		
		//AspectWildcard Weave:
		//	'with' aspectWildcardImport=QualifiedNameWithWildcard
		@Override public ParserRule getRule() { return rule; }

		//'with' aspectWildcardImport=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//'with'
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }

		//aspectWildcardImport=QualifiedNameWithWildcard
		public Assignment getAspectWildcardImportAssignment_1() { return cAspectWildcardImportAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getAspectWildcardImportQualifiedNameWithWildcardParserRuleCall_1_0() { return cAspectWildcardImportQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	
	
	public class ResourceTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.melange.Melange.ResourceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMELANGEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMELANGEMelangeKeyword_0_0 = (Keyword)cMELANGEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEMFEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEMFEMFKeyword_1_0 = (Keyword)cEMFEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cXTEXTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cXTEXTXtextKeyword_2_0 = (Keyword)cXTEXTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ResourceType:
		//	MELANGE='Melange' | EMF | XTEXT='Xtext';
		public EnumRule getRule() { return rule; }

		//MELANGE='Melange' | EMF | XTEXT='Xtext'
		public Alternatives getAlternatives() { return cAlternatives; }

		//MELANGE='Melange'
		public EnumLiteralDeclaration getMELANGEEnumLiteralDeclaration_0() { return cMELANGEEnumLiteralDeclaration_0; }

		//'Melange'
		public Keyword getMELANGEMelangeKeyword_0_0() { return cMELANGEMelangeKeyword_0_0; }

		//EMF
		public EnumLiteralDeclaration getEMFEnumLiteralDeclaration_1() { return cEMFEnumLiteralDeclaration_1; }

		//'EMF'
		public Keyword getEMFEMFKeyword_1_0() { return cEMFEMFKeyword_1_0; }

		//XTEXT='Xtext'
		public EnumLiteralDeclaration getXTEXTEnumLiteralDeclaration_2() { return cXTEXTEnumLiteralDeclaration_2; }

		//'Xtext'
		public Keyword getXTEXTXtextKeyword_2_0() { return cXTEXTXtextKeyword_2_0; }
	}
	
	private final ModelTypingSpaceElements pModelTypingSpace;
	private final ElementElements pElement;
	private final TransformationDeclElements pTransformationDecl;
	private final LanguageElements pLanguage;
	private final AnnotationElements pAnnotation;
	private final ExternalLanguageElements pExternalLanguage;
	private final ResourceTypeElements eResourceType;
	private final EcoreModelTypeElements pEcoreModelType;
	private final XbaseTransformationElements pXbaseTransformation;
	private final MappingElements pMapping;
	private final PackageMappingElements pPackageMapping;
	private final ClassMappingElements pClassMapping;
	private final PropertyMappingElements pPropertyMapping;
	private final OperatorElements pOperator;
	private final ImportElements pImport;
	private final ExternalImportElements pExternalImport;
	private final MergeElements pMerge;
	private final SliceElements pSlice;
	private final InheritElements pInherit;
	private final WeaveElements pWeave;
	private final AspectTypeRefElements pAspectTypeRef;
	private final AspectWildcardElements pAspectWildcard;
	
	private final Grammar grammar;

	private final XbaseGrammarAccess gaXbase;

	private final XtypeGrammarAccess gaXtype;

	@Inject
	public MelangeGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase,
		XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pModelTypingSpace = new ModelTypingSpaceElements();
		this.pElement = new ElementElements();
		this.pTransformationDecl = new TransformationDeclElements();
		this.pLanguage = new LanguageElements();
		this.pAnnotation = new AnnotationElements();
		this.pExternalLanguage = new ExternalLanguageElements();
		this.eResourceType = new ResourceTypeElements();
		this.pEcoreModelType = new EcoreModelTypeElements();
		this.pXbaseTransformation = new XbaseTransformationElements();
		this.pMapping = new MappingElements();
		this.pPackageMapping = new PackageMappingElements();
		this.pClassMapping = new ClassMappingElements();
		this.pPropertyMapping = new PropertyMappingElements();
		this.pOperator = new OperatorElements();
		this.pImport = new ImportElements();
		this.pExternalImport = new ExternalImportElements();
		this.pMerge = new MergeElements();
		this.pSlice = new SliceElements();
		this.pInherit = new InheritElements();
		this.pWeave = new WeaveElements();
		this.pAspectTypeRef = new AspectTypeRefElements();
		this.pAspectWildcard = new AspectWildcardElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.inria.diverse.melange.Melange".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//ModelTypingSpace:
	//	'package' name=QualifiedName
	//	imports=XImportSection?
	//	elements+=Element*;
	public ModelTypingSpaceElements getModelTypingSpaceAccess() {
		return pModelTypingSpace;
	}
	
	public ParserRule getModelTypingSpaceRule() {
		return getModelTypingSpaceAccess().getRule();
	}

	//Element:
	//	Language | => 'external' ExternalLanguage | EcoreModelType | TransformationDecl | Mapping;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//TransformationDecl Transformation:
	//	XbaseTransformation
	public TransformationDeclElements getTransformationDeclAccess() {
		return pTransformationDecl;
	}
	
	public ParserRule getTransformationDeclRule() {
		return getTransformationDeclAccess().getRule();
	}

	//Language:
	//	'language' name=ValidID ('inherits' operators+=Inherit ("," operators+=Inherit)*)? ('implements'
	//	implements+=[ModelType|QualifiedName] (',' implements+=[ModelType|QualifiedName])*)? ('requires'
	//	requires+=[ModelType|QualifiedName] (',' requires+=[ModelType|QualifiedName])*)?
	//	'{'
	//	operators+=Operator* & ('resource' resourceType=ResourceType (=> 'uri' resourceUri=STRING | 'setup'
	//	xtextSetupRef=JvmTypeReference)?)? & ('xtext' xtext+=STRING (',' xtext+=STRING)*)? & ('sirius' sirius+=STRING (','
	//	sirius+=STRING)*)? & ('ecl' ecl+=STRING (',' ecl+=STRING)*)? & ('xmof' xmof=STRING)? & ('fileExtension'
	//	fileExtension=STRING)? & ('exactType' exactTypeName=ValidID (=> 'uri' exactTypeUri=STRING)?)? &
	//	annotations+=Annotation*
	//	'}';
	public LanguageElements getLanguageAccess() {
		return pLanguage;
	}
	
	public ParserRule getLanguageRule() {
		return getLanguageAccess().getRule();
	}

	//Annotation:
	//	'annotation' key=STRING ":" value=STRING;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//ExternalLanguage:
	//	'language' name=ValidID ('implements' implements+=[ModelType|QualifiedName] (','
	//	implements+=[ModelType|QualifiedName])*)?
	//	'{'
	//	operators+=ExternalImport & operators+=Weave* & ('xtext' xtext+=STRING (',' xtext+=STRING)*)? & ('sirius'
	//	sirius+=STRING (',' sirius+=STRING)*)? & ('ecl' ecl+=STRING (',' ecl+=STRING)*)? & ('xmof' xmof=STRING)? &
	//	('fileExtension' fileExtension=STRING)? & ('exactType' exactTypeName=ValidID (=> 'uri' exactTypeUri=STRING)?)?
	//	'}';
	public ExternalLanguageElements getExternalLanguageAccess() {
		return pExternalLanguage;
	}
	
	public ParserRule getExternalLanguageRule() {
		return getExternalLanguageAccess().getRule();
	}

	//enum ResourceType:
	//	MELANGE='Melange' | EMF | XTEXT='Xtext';
	public ResourceTypeElements getResourceTypeAccess() {
		return eResourceType;
	}
	
	public EnumRule getResourceTypeRule() {
		return getResourceTypeAccess().getRule();
	}

	//EcoreModelType ModelType:
	//	'modeltype' name=ValidID '{'
	//	'syntax' ecoreUri=STRING & ('uri' mtUri=STRING)?
	//	'}'
	public EcoreModelTypeElements getEcoreModelTypeAccess() {
		return pEcoreModelType;
	}
	
	public ParserRule getEcoreModelTypeRule() {
		return getEcoreModelTypeAccess().getRule();
	}

	//XbaseTransformation:
	//	main?='@Main'?
	//	'transformation' returnTypeRef=JvmTypeReference? name=ValidID
	//	'(' (parameters+=FullJvmFormalParameter (',' parameters+=FullJvmFormalParameter)*)? ')'
	//	body=XBlockExpression;
	public XbaseTransformationElements getXbaseTransformationAccess() {
		return pXbaseTransformation;
	}
	
	public ParserRule getXbaseTransformationRule() {
		return getXbaseTransformationAccess().getRule();
	}

	////KomprenSlicer:
	////	slicer = Slicer
	////;
	//Mapping:
	//	"map" from=[Language|QualifiedName] "to" to=[ModelType|QualifiedName] "{"
	//	rules+=ClassMapping*
	//	"}";
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}

	//PackageMapping PackageBinding:
	//	from=STRING "to" to=STRING ("{"
	//	classes+=ClassMapping*
	//	"}")?
	public PackageMappingElements getPackageMappingAccess() {
		return pPackageMapping;
	}
	
	public ParserRule getPackageMappingRule() {
		return getPackageMappingAccess().getRule();
	}

	//ClassMapping ClassBinding:
	//	from=STRING "to" to=STRING ("{"
	//	properties+=PropertyMapping*
	//	"}")?
	public ClassMappingElements getClassMappingAccess() {
		return pClassMapping;
	}
	
	public ParserRule getClassMappingRule() {
		return getClassMappingAccess().getRule();
	}

	//PropertyMapping PropertyBinding:
	//	from=STRING "to" to=STRING
	public PropertyMappingElements getPropertyMappingAccess() {
		return pPropertyMapping;
	}
	
	public ParserRule getPropertyMappingRule() {
		return getPropertyMappingAccess().getRule();
	}

	//Operator:
	//	Import | Merge | Slice | Weave;
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//Import:
	//	'syntax' ecoreUri=STRING ('withGenmodel' (genmodelUris+=STRING (',' genmodelUris+=STRING)*))? ('renaming' '{'
	//	mappingRules+=PackageMapping*
	//	'}')?;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//ExternalImport Import:
	//	'syntax' ecoreUri=STRING ('withGenmodel' (genmodelUris+=STRING (',' genmodelUris+=STRING)*))?
	public ExternalImportElements getExternalImportAccess() {
		return pExternalImport;
	}
	
	public ParserRule getExternalImportRule() {
		return getExternalImportAccess().getRule();
	}

	//Merge:
	//	'merge' targetLanguage=[Language|QualifiedName] ('renaming' '{'
	//	mappingRules+=PackageMapping*
	//	'}')?;
	public MergeElements getMergeAccess() {
		return pMerge;
	}
	
	public ParserRule getMergeRule() {
		return getMergeAccess().getRule();
	}

	//Slice:
	//	'slice' targetLanguage=[Language|QualifiedName] 'on' '[' roots+=STRING (',' roots+=STRING)* ']' ('renaming' '{'
	//	mappingRules+=PackageMapping*
	//	'}')?;
	public SliceElements getSliceAccess() {
		return pSlice;
	}
	
	public ParserRule getSliceRule() {
		return getSliceAccess().getRule();
	}

	//Inherit Inheritance:
	//	targetLanguage=[Language|QualifiedName]
	public InheritElements getInheritAccess() {
		return pInherit;
	}
	
	public ParserRule getInheritRule() {
		return getInheritAccess().getRule();
	}

	//Weave:
	//	AspectTypeRef | AspectWildcard;
	public WeaveElements getWeaveAccess() {
		return pWeave;
	}
	
	public ParserRule getWeaveRule() {
		return getWeaveAccess().getRule();
	}

	//AspectTypeRef Weave:
	//	'with' aspectTypeRef=JvmTypeReference
	public AspectTypeRefElements getAspectTypeRefAccess() {
		return pAspectTypeRef;
	}
	
	public ParserRule getAspectTypeRefRule() {
		return getAspectTypeRefAccess().getRule();
	}

	//AspectWildcard Weave:
	//	'with' aspectWildcardImport=QualifiedNameWithWildcard
	public AspectWildcardElements getAspectWildcardAccess() {
		return pAspectWildcard;
	}
	
	public ParserRule getAspectWildcardRule() {
		return getAspectWildcardAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' |
	//	'<' '<' '=' |
	//	'>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//	=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	'->'
	//	| '..<'
	//	| '>' '..'
	//	| '..'
	//	| '=>'
	//	| '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>'
	//	| '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//	| XCastedExpression
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//	| => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	//	')')?
	//	memberCallArguments+=XClosure?)*
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure XExpression:
	//	=> ({XClosure}
	//	'[')
	//	=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|')?
	//	expression=XExpressionInClosure
	//	']'
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')'
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression XExpression:
	//	{XIfExpression}
	//	'if' '(' if=XExpression ')'
	//	then=XExpression (=> 'else' else=XExpression)?
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression XExpression:
	//	{XSwitchExpression}
	//	'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//	| => (declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//	cases+=XCasePart* ('default' ':' default=XExpression)?
	//	'}'
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression}
	//	'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression}
	//	'for' '(' (initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//	expression=XExpression? ';' (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression XExpression:
	//	{XWhileExpression}
	//	'while' '(' predicate=XExpression ')'
	//	body=XExpression
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression}
	//	'do'
	//	body=XExpression
	//	'while' '(' predicate=XExpression ')'
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression XExpression:
	//	{XBlockExpression}
	//	'{' (expressions+=XExpressionOrVarDeclaration ';'?)*
	//	'}'
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)?
	//	')')?
	//	featureCallArguments+=XClosure?
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall XExpression:
	//	{XConstructorCall}
	//	'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<' typeArguments+=JvmArgumentTypeReference (','
	//	typeArguments+=JvmArgumentTypeReference)* '>')? (=> explicitConstructorCall?='(' (arguments+=XShortClosure
	//	| arguments+=XExpression (',' arguments+=XExpression)*)?
	//	')')?
	//	arguments+=XClosure?
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true')
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null'
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')'
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression}
	//	'try'
	//	expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally' finallyExpression=XExpression)?
	//	| 'finally' finallyExpression=XExpression)
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression}
	//	'synchronized' '(') param=XExpression ')' expression=XExpression
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//	| XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*
	//	| constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? |
	//	"'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	} 
}
