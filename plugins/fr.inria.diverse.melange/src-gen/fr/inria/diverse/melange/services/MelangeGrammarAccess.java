/*
 * generated by Xtext
 */
package fr.inria.diverse.melange.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class MelangeGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelTypingSpaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelTypingSpace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsXImportSectionParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		////import "http://kompren/fr.inria.diverse.kompren" as kompren
		//ModelTypingSpace:
		//	("package" name=QualifiedName)? imports=XImportSection? elements+=Element*;
		@Override public ParserRule getRule() { return rule; }

		//("package" name=QualifiedName)? imports=XImportSection? elements+=Element*
		public Group getGroup() { return cGroup; }

		//("package" name=QualifiedName)?
		public Group getGroup_0() { return cGroup_0; }

		//"package"
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }

		//imports=XImportSection?
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//XImportSection
		public RuleCall getImportsXImportSectionParserRuleCall_1_0() { return cImportsXImportSectionParserRuleCall_1_0; }

		//elements+=Element*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//Element
		public RuleCall getElementsElementParserRuleCall_2_0() { return cElementsElementParserRuleCall_2_0; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLanguageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEcoreModelTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTransformationDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMappingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Element:
		//	Language | EcoreModelType | TransformationDecl | Mapping;
		@Override public ParserRule getRule() { return rule; }

		//Language | EcoreModelType | TransformationDecl | Mapping
		public Alternatives getAlternatives() { return cAlternatives; }

		//Language
		public RuleCall getLanguageParserRuleCall_0() { return cLanguageParserRuleCall_0; }

		//EcoreModelType
		public RuleCall getEcoreModelTypeParserRuleCall_1() { return cEcoreModelTypeParserRuleCall_1; }

		//TransformationDecl
		public RuleCall getTransformationDeclParserRuleCall_2() { return cTransformationDeclParserRuleCall_2; }

		//Mapping
		public RuleCall getMappingParserRuleCall_3() { return cMappingParserRuleCall_3; }
	}

	public class TransformationDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationDecl");
		private final RuleCall cXbaseTransformationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TransformationDecl returns Transformation: // | KomprenSlicer
		//	XbaseTransformation;
		@Override public ParserRule getRule() { return rule; }

		//// | KomprenSlicer
		//XbaseTransformation
		public RuleCall getXbaseTransformationParserRuleCall() { return cXbaseTransformationParserRuleCall; }
	}

	public class LanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Language");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cLanguageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cInheritsKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cOperatorsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cOperatorsInheritParserRuleCall_0_2_1_0 = (RuleCall)cOperatorsAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_0_2_2 = (Group)cGroup_0_2.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_2_0 = (Keyword)cGroup_0_2_2.eContents().get(0);
		private final Assignment cOperatorsAssignment_0_2_2_1 = (Assignment)cGroup_0_2_2.eContents().get(1);
		private final RuleCall cOperatorsInheritParserRuleCall_0_2_2_1_0 = (RuleCall)cOperatorsAssignment_0_2_2_1.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cImplementsKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cImplementsAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final CrossReference cImplementsModelTypeCrossReference_0_3_1_0 = (CrossReference)cImplementsAssignment_0_3_1.eContents().get(0);
		private final RuleCall cImplementsModelTypeQualifiedNameParserRuleCall_0_3_1_0_1 = (RuleCall)cImplementsModelTypeCrossReference_0_3_1_0.eContents().get(1);
		private final Group cGroup_0_3_2 = (Group)cGroup_0_3.eContents().get(2);
		private final Keyword cCommaKeyword_0_3_2_0 = (Keyword)cGroup_0_3_2.eContents().get(0);
		private final Assignment cImplementsAssignment_0_3_2_1 = (Assignment)cGroup_0_3_2.eContents().get(1);
		private final CrossReference cImplementsModelTypeCrossReference_0_3_2_1_0 = (CrossReference)cImplementsAssignment_0_3_2_1.eContents().get(0);
		private final RuleCall cImplementsModelTypeQualifiedNameParserRuleCall_0_3_2_1_0_1 = (RuleCall)cImplementsModelTypeCrossReference_0_3_2_1_0.eContents().get(1);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cRequiresKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cRequiresAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final CrossReference cRequiresModelTypeCrossReference_0_4_1_0 = (CrossReference)cRequiresAssignment_0_4_1.eContents().get(0);
		private final RuleCall cRequiresModelTypeQualifiedNameParserRuleCall_0_4_1_0_1 = (RuleCall)cRequiresModelTypeCrossReference_0_4_1_0.eContents().get(1);
		private final Group cGroup_0_4_2 = (Group)cGroup_0_4.eContents().get(2);
		private final Keyword cCommaKeyword_0_4_2_0 = (Keyword)cGroup_0_4_2.eContents().get(0);
		private final Assignment cRequiresAssignment_0_4_2_1 = (Assignment)cGroup_0_4_2.eContents().get(1);
		private final CrossReference cRequiresModelTypeCrossReference_0_4_2_1_0 = (CrossReference)cRequiresAssignment_0_4_2_1.eContents().get(0);
		private final RuleCall cRequiresModelTypeQualifiedNameParserRuleCall_0_4_2_1_0_1 = (RuleCall)cRequiresModelTypeCrossReference_0_4_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_0_6 = (Group)cGroup_0.eContents().get(6);
		private final Keyword cResourceKeyword_0_6_0 = (Keyword)cGroup_0_6.eContents().get(0);
		private final Assignment cResourceTypeAssignment_0_6_1 = (Assignment)cGroup_0_6.eContents().get(1);
		private final RuleCall cResourceTypeResourceTypeEnumRuleCall_0_6_1_0 = (RuleCall)cResourceTypeAssignment_0_6_1.eContents().get(0);
		private final Alternatives cAlternatives_0_6_2 = (Alternatives)cGroup_0_6.eContents().get(2);
		private final Group cGroup_0_6_2_0 = (Group)cAlternatives_0_6_2.eContents().get(0);
		private final Keyword cUriKeyword_0_6_2_0_0 = (Keyword)cGroup_0_6_2_0.eContents().get(0);
		private final Assignment cResourceUriAssignment_0_6_2_0_1 = (Assignment)cGroup_0_6_2_0.eContents().get(1);
		private final RuleCall cResourceUriSTRINGTerminalRuleCall_0_6_2_0_1_0 = (RuleCall)cResourceUriAssignment_0_6_2_0_1.eContents().get(0);
		private final Group cGroup_0_6_2_1 = (Group)cAlternatives_0_6_2.eContents().get(1);
		private final Keyword cSetupKeyword_0_6_2_1_0 = (Keyword)cGroup_0_6_2_1.eContents().get(0);
		private final Assignment cXtextSetupRefAssignment_0_6_2_1_1 = (Assignment)cGroup_0_6_2_1.eContents().get(1);
		private final RuleCall cXtextSetupRefJvmTypeReferenceParserRuleCall_0_6_2_1_1_0 = (RuleCall)cXtextSetupRefAssignment_0_6_2_1_1.eContents().get(0);
		private final Assignment cOperatorsAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cOperatorsOperatorParserRuleCall_1_0 = (RuleCall)cOperatorsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cExactTypeKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cExactTypeNameAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cExactTypeNameValidIDParserRuleCall_2_0_1_0 = (RuleCall)cExactTypeNameAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final Keyword cUriKeyword_2_0_2_0 = (Keyword)cGroup_2_0_2.eContents().get(0);
		private final Assignment cExactTypeUriAssignment_2_0_2_1 = (Assignment)cGroup_2_0_2.eContents().get(1);
		private final RuleCall cExactTypeUriSTRINGTerminalRuleCall_2_0_2_1_0 = (RuleCall)cExactTypeUriAssignment_2_0_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Language:
		//	"language" name=ValidID ("inherits" operators+=Inherit ("," operators+=Inherit)*)? ("implements"
		//	implements+=[ModelType|QualifiedName] ("," implements+=[ModelType|QualifiedName])*)? ("requires"
		//	requires+=[ModelType|QualifiedName] ("," requires+=[ModelType|QualifiedName])*)? "{" ("resource"
		//	resourceType=ResourceType ("uri" resourceUri=STRING | "setup" xtextSetupRef=JvmTypeReference)?)? &
		//	operators+=Operator* & ("exactType" exactTypeName=ValidID ("uri" exactTypeUri=STRING)?) "}";
		@Override public ParserRule getRule() { return rule; }

		//"language" name=ValidID ("inherits" operators+=Inherit ("," operators+=Inherit)*)? ("implements"
		//implements+=[ModelType|QualifiedName] ("," implements+=[ModelType|QualifiedName])*)? ("requires"
		//requires+=[ModelType|QualifiedName] ("," requires+=[ModelType|QualifiedName])*)? "{" ("resource"
		//resourceType=ResourceType ("uri" resourceUri=STRING | "setup" xtextSetupRef=JvmTypeReference)?)? & operators+=Operator*
		//& ("exactType" exactTypeName=ValidID ("uri" exactTypeUri=STRING)?) "}"
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"language" name=ValidID ("inherits" operators+=Inherit ("," operators+=Inherit)*)? ("implements"
		//implements+=[ModelType|QualifiedName] ("," implements+=[ModelType|QualifiedName])*)? ("requires"
		//requires+=[ModelType|QualifiedName] ("," requires+=[ModelType|QualifiedName])*)? "{" ("resource"
		//resourceType=ResourceType ("uri" resourceUri=STRING | "setup" xtextSetupRef=JvmTypeReference)?)?
		public Group getGroup_0() { return cGroup_0; }

		//"language"
		public Keyword getLanguageKeyword_0_0() { return cLanguageKeyword_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_1_0() { return cNameValidIDParserRuleCall_0_1_0; }

		//("inherits" operators+=Inherit ("," operators+=Inherit)*)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"inherits"
		public Keyword getInheritsKeyword_0_2_0() { return cInheritsKeyword_0_2_0; }

		//operators+=Inherit
		public Assignment getOperatorsAssignment_0_2_1() { return cOperatorsAssignment_0_2_1; }

		//Inherit
		public RuleCall getOperatorsInheritParserRuleCall_0_2_1_0() { return cOperatorsInheritParserRuleCall_0_2_1_0; }

		//("," operators+=Inherit)*
		public Group getGroup_0_2_2() { return cGroup_0_2_2; }

		//","
		public Keyword getCommaKeyword_0_2_2_0() { return cCommaKeyword_0_2_2_0; }

		//operators+=Inherit
		public Assignment getOperatorsAssignment_0_2_2_1() { return cOperatorsAssignment_0_2_2_1; }

		//Inherit
		public RuleCall getOperatorsInheritParserRuleCall_0_2_2_1_0() { return cOperatorsInheritParserRuleCall_0_2_2_1_0; }

		//("implements" implements+=[ModelType|QualifiedName] ("," implements+=[ModelType|QualifiedName])*)?
		public Group getGroup_0_3() { return cGroup_0_3; }

		//"implements"
		public Keyword getImplementsKeyword_0_3_0() { return cImplementsKeyword_0_3_0; }

		//implements+=[ModelType|QualifiedName]
		public Assignment getImplementsAssignment_0_3_1() { return cImplementsAssignment_0_3_1; }

		//[ModelType|QualifiedName]
		public CrossReference getImplementsModelTypeCrossReference_0_3_1_0() { return cImplementsModelTypeCrossReference_0_3_1_0; }

		//QualifiedName
		public RuleCall getImplementsModelTypeQualifiedNameParserRuleCall_0_3_1_0_1() { return cImplementsModelTypeQualifiedNameParserRuleCall_0_3_1_0_1; }

		//("," implements+=[ModelType|QualifiedName])*
		public Group getGroup_0_3_2() { return cGroup_0_3_2; }

		//","
		public Keyword getCommaKeyword_0_3_2_0() { return cCommaKeyword_0_3_2_0; }

		//implements+=[ModelType|QualifiedName]
		public Assignment getImplementsAssignment_0_3_2_1() { return cImplementsAssignment_0_3_2_1; }

		//[ModelType|QualifiedName]
		public CrossReference getImplementsModelTypeCrossReference_0_3_2_1_0() { return cImplementsModelTypeCrossReference_0_3_2_1_0; }

		//QualifiedName
		public RuleCall getImplementsModelTypeQualifiedNameParserRuleCall_0_3_2_1_0_1() { return cImplementsModelTypeQualifiedNameParserRuleCall_0_3_2_1_0_1; }

		//("requires" requires+=[ModelType|QualifiedName] ("," requires+=[ModelType|QualifiedName])*)?
		public Group getGroup_0_4() { return cGroup_0_4; }

		//"requires"
		public Keyword getRequiresKeyword_0_4_0() { return cRequiresKeyword_0_4_0; }

		//requires+=[ModelType|QualifiedName]
		public Assignment getRequiresAssignment_0_4_1() { return cRequiresAssignment_0_4_1; }

		//[ModelType|QualifiedName]
		public CrossReference getRequiresModelTypeCrossReference_0_4_1_0() { return cRequiresModelTypeCrossReference_0_4_1_0; }

		//QualifiedName
		public RuleCall getRequiresModelTypeQualifiedNameParserRuleCall_0_4_1_0_1() { return cRequiresModelTypeQualifiedNameParserRuleCall_0_4_1_0_1; }

		//("," requires+=[ModelType|QualifiedName])*
		public Group getGroup_0_4_2() { return cGroup_0_4_2; }

		//","
		public Keyword getCommaKeyword_0_4_2_0() { return cCommaKeyword_0_4_2_0; }

		//requires+=[ModelType|QualifiedName]
		public Assignment getRequiresAssignment_0_4_2_1() { return cRequiresAssignment_0_4_2_1; }

		//[ModelType|QualifiedName]
		public CrossReference getRequiresModelTypeCrossReference_0_4_2_1_0() { return cRequiresModelTypeCrossReference_0_4_2_1_0; }

		//QualifiedName
		public RuleCall getRequiresModelTypeQualifiedNameParserRuleCall_0_4_2_1_0_1() { return cRequiresModelTypeQualifiedNameParserRuleCall_0_4_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_5() { return cLeftCurlyBracketKeyword_0_5; }

		//("resource" resourceType=ResourceType ("uri" resourceUri=STRING | "setup" xtextSetupRef=JvmTypeReference)?)?
		public Group getGroup_0_6() { return cGroup_0_6; }

		//"resource"
		public Keyword getResourceKeyword_0_6_0() { return cResourceKeyword_0_6_0; }

		//resourceType=ResourceType
		public Assignment getResourceTypeAssignment_0_6_1() { return cResourceTypeAssignment_0_6_1; }

		//ResourceType
		public RuleCall getResourceTypeResourceTypeEnumRuleCall_0_6_1_0() { return cResourceTypeResourceTypeEnumRuleCall_0_6_1_0; }

		//(=> "uri" resourceUri=STRING | "setup" xtextSetupRef=JvmTypeReference)?
		public Alternatives getAlternatives_0_6_2() { return cAlternatives_0_6_2; }

		//=> "uri" resourceUri=STRING
		public Group getGroup_0_6_2_0() { return cGroup_0_6_2_0; }

		//=> "uri"
		public Keyword getUriKeyword_0_6_2_0_0() { return cUriKeyword_0_6_2_0_0; }

		//resourceUri=STRING
		public Assignment getResourceUriAssignment_0_6_2_0_1() { return cResourceUriAssignment_0_6_2_0_1; }

		//STRING
		public RuleCall getResourceUriSTRINGTerminalRuleCall_0_6_2_0_1_0() { return cResourceUriSTRINGTerminalRuleCall_0_6_2_0_1_0; }

		//"setup" xtextSetupRef=JvmTypeReference
		public Group getGroup_0_6_2_1() { return cGroup_0_6_2_1; }

		//"setup"
		public Keyword getSetupKeyword_0_6_2_1_0() { return cSetupKeyword_0_6_2_1_0; }

		//xtextSetupRef=JvmTypeReference
		public Assignment getXtextSetupRefAssignment_0_6_2_1_1() { return cXtextSetupRefAssignment_0_6_2_1_1; }

		//JvmTypeReference
		public RuleCall getXtextSetupRefJvmTypeReferenceParserRuleCall_0_6_2_1_1_0() { return cXtextSetupRefJvmTypeReferenceParserRuleCall_0_6_2_1_1_0; }

		//operators+=Operator*
		public Assignment getOperatorsAssignment_1() { return cOperatorsAssignment_1; }

		//Operator
		public RuleCall getOperatorsOperatorParserRuleCall_1_0() { return cOperatorsOperatorParserRuleCall_1_0; }

		//("exactType" exactTypeName=ValidID ("uri" exactTypeUri=STRING)?) "}"
		public Group getGroup_2() { return cGroup_2; }

		//"exactType" exactTypeName=ValidID ("uri" exactTypeUri=STRING)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"exactType"
		public Keyword getExactTypeKeyword_2_0_0() { return cExactTypeKeyword_2_0_0; }

		//exactTypeName=ValidID
		public Assignment getExactTypeNameAssignment_2_0_1() { return cExactTypeNameAssignment_2_0_1; }

		//ValidID
		public RuleCall getExactTypeNameValidIDParserRuleCall_2_0_1_0() { return cExactTypeNameValidIDParserRuleCall_2_0_1_0; }

		//(=> "uri" exactTypeUri=STRING)?
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }

		//=> "uri"
		public Keyword getUriKeyword_2_0_2_0() { return cUriKeyword_2_0_2_0; }

		//exactTypeUri=STRING
		public Assignment getExactTypeUriAssignment_2_0_2_1() { return cExactTypeUriAssignment_2_0_2_1; }

		//STRING
		public RuleCall getExactTypeUriSTRINGTerminalRuleCall_2_0_2_1_0() { return cExactTypeUriSTRINGTerminalRuleCall_2_0_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1() { return cRightCurlyBracketKeyword_2_1; }
	}

	public class EcoreModelTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EcoreModelType");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cModeltypeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cSyntaxKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cEcoreUriAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cEcoreUriSTRINGTerminalRuleCall_0_4_0 = (RuleCall)cEcoreUriAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cUriKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cMtUriAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cMtUriSTRINGTerminalRuleCall_1_0_1_0 = (RuleCall)cMtUriAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		////Inheritance returns Inheritance:
		////	'inherits' superMetamodel = [Metamodel | QualifiedName]
		////;
		//EcoreModelType returns ModelType:
		//	"modeltype" name=ValidID "{" "syntax" ecoreUri=STRING & ("uri" mtUri=STRING)? "}";
		@Override public ParserRule getRule() { return rule; }

		//"modeltype" name=ValidID "{" "syntax" ecoreUri=STRING & ("uri" mtUri=STRING)? "}"
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"modeltype" name=ValidID "{" "syntax" ecoreUri=STRING
		public Group getGroup_0() { return cGroup_0; }

		//"modeltype"
		public Keyword getModeltypeKeyword_0_0() { return cModeltypeKeyword_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_1_0() { return cNameValidIDParserRuleCall_0_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }

		//"syntax"
		public Keyword getSyntaxKeyword_0_3() { return cSyntaxKeyword_0_3; }

		//ecoreUri=STRING
		public Assignment getEcoreUriAssignment_0_4() { return cEcoreUriAssignment_0_4; }

		//STRING
		public RuleCall getEcoreUriSTRINGTerminalRuleCall_0_4_0() { return cEcoreUriSTRINGTerminalRuleCall_0_4_0; }

		//("uri" mtUri=STRING)? "}"
		public Group getGroup_1() { return cGroup_1; }

		//("uri" mtUri=STRING)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"uri"
		public Keyword getUriKeyword_1_0_0() { return cUriKeyword_1_0_0; }

		//mtUri=STRING
		public Assignment getMtUriAssignment_1_0_1() { return cMtUriAssignment_1_0_1; }

		//STRING
		public RuleCall getMtUriSTRINGTerminalRuleCall_1_0_1_0() { return cMtUriSTRINGTerminalRuleCall_1_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1() { return cRightCurlyBracketKeyword_1_1; }
	}

	public class XbaseTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XbaseTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMainAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cMainMainKeyword_0_0 = (Keyword)cMainAssignment_0.eContents().get(0);
		private final Keyword cTransformationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReturnTypeRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReturnTypeRefJvmTypeReferenceParserRuleCall_2_0 = (RuleCall)cReturnTypeRefAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParametersAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParametersFullJvmFormalParameterParserRuleCall_5_0_0 = (RuleCall)cParametersAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParametersFullJvmFormalParameterParserRuleCall_5_1_1_0 = (RuleCall)cParametersAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		
		//XbaseTransformation:
		//	main?="@Main"? "transformation" returnTypeRef=JvmTypeReference? name=ValidID "(" (parameters+=FullJvmFormalParameter
		//	("," parameters+=FullJvmFormalParameter)*)? ")" body=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }

		//main?="@Main"? "transformation" returnTypeRef=JvmTypeReference? name=ValidID "(" (parameters+=FullJvmFormalParameter
		//("," parameters+=FullJvmFormalParameter)*)? ")" body=XBlockExpression
		public Group getGroup() { return cGroup; }

		//main?="@Main"?
		public Assignment getMainAssignment_0() { return cMainAssignment_0; }

		//"@Main"
		public Keyword getMainMainKeyword_0_0() { return cMainMainKeyword_0_0; }

		//"transformation"
		public Keyword getTransformationKeyword_1() { return cTransformationKeyword_1; }

		//returnTypeRef=JvmTypeReference?
		public Assignment getReturnTypeRefAssignment_2() { return cReturnTypeRefAssignment_2; }

		//JvmTypeReference
		public RuleCall getReturnTypeRefJvmTypeReferenceParserRuleCall_2_0() { return cReturnTypeRefJvmTypeReferenceParserRuleCall_2_0; }

		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(parameters+=FullJvmFormalParameter ("," parameters+=FullJvmFormalParameter)*)?
		public Group getGroup_5() { return cGroup_5; }

		//parameters+=FullJvmFormalParameter
		public Assignment getParametersAssignment_5_0() { return cParametersAssignment_5_0; }

		//FullJvmFormalParameter
		public RuleCall getParametersFullJvmFormalParameterParserRuleCall_5_0_0() { return cParametersFullJvmFormalParameterParserRuleCall_5_0_0; }

		//("," parameters+=FullJvmFormalParameter)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//parameters+=FullJvmFormalParameter
		public Assignment getParametersAssignment_5_1_1() { return cParametersAssignment_5_1_1; }

		//FullJvmFormalParameter
		public RuleCall getParametersFullJvmFormalParameterParserRuleCall_5_1_1_0() { return cParametersFullJvmFormalParameterParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//body=XBlockExpression
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }

		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_7_0() { return cBodyXBlockExpressionParserRuleCall_7_0; }
	}

	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFromLanguageCrossReference_1_0 = (CrossReference)cFromAssignment_1.eContents().get(0);
		private final RuleCall cFromLanguageQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cFromLanguageCrossReference_1_0.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cToModelTypeCrossReference_3_0 = (CrossReference)cToAssignment_3.eContents().get(0);
		private final RuleCall cToModelTypeQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cToModelTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRulesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRulesClassMappingParserRuleCall_5_0 = (RuleCall)cRulesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////KomprenSlicer:
		////	slicer = Slicer
		////;
		//Mapping:
		//	"map" from=[Language|QualifiedName] "to" to=[ModelType|QualifiedName] "{" rules+=ClassMapping* "}";
		@Override public ParserRule getRule() { return rule; }

		//"map" from=[Language|QualifiedName] "to" to=[ModelType|QualifiedName] "{" rules+=ClassMapping* "}"
		public Group getGroup() { return cGroup; }

		//"map"
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }

		//from=[Language|QualifiedName]
		public Assignment getFromAssignment_1() { return cFromAssignment_1; }

		//[Language|QualifiedName]
		public CrossReference getFromLanguageCrossReference_1_0() { return cFromLanguageCrossReference_1_0; }

		//QualifiedName
		public RuleCall getFromLanguageQualifiedNameParserRuleCall_1_0_1() { return cFromLanguageQualifiedNameParserRuleCall_1_0_1; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//to=[ModelType|QualifiedName]
		public Assignment getToAssignment_3() { return cToAssignment_3; }

		//[ModelType|QualifiedName]
		public CrossReference getToModelTypeCrossReference_3_0() { return cToModelTypeCrossReference_3_0; }

		//QualifiedName
		public RuleCall getToModelTypeQualifiedNameParserRuleCall_3_0_1() { return cToModelTypeQualifiedNameParserRuleCall_3_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//rules+=ClassMapping*
		public Assignment getRulesAssignment_5() { return cRulesAssignment_5; }

		//ClassMapping
		public RuleCall getRulesClassMappingParserRuleCall_5_0() { return cRulesClassMappingParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class PackageMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFromEPackageCrossReference_0_0 = (CrossReference)cFromAssignment_0.eContents().get(0);
		private final RuleCall cFromEPackageQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cFromEPackageCrossReference_0_0.eContents().get(1);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cToSTRINGTerminalRuleCall_2_0 = (RuleCall)cToAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cClassesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClassesClassMappingParserRuleCall_4_0 = (RuleCall)cClassesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PackageMapping returns PackageBinding:
		//	from=[ecore::EPackage|QualifiedName] "to" to=STRING "{" classes+=ClassMapping* "}";
		@Override public ParserRule getRule() { return rule; }

		//from=[ecore::EPackage|QualifiedName] "to" to=STRING "{" classes+=ClassMapping* "}"
		public Group getGroup() { return cGroup; }

		//from=[ecore::EPackage|QualifiedName]
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }

		//[ecore::EPackage|QualifiedName]
		public CrossReference getFromEPackageCrossReference_0_0() { return cFromEPackageCrossReference_0_0; }

		//QualifiedName
		public RuleCall getFromEPackageQualifiedNameParserRuleCall_0_0_1() { return cFromEPackageQualifiedNameParserRuleCall_0_0_1; }

		//"to"
		public Keyword getToKeyword_1() { return cToKeyword_1; }

		//to=STRING
		public Assignment getToAssignment_2() { return cToAssignment_2; }

		//STRING
		public RuleCall getToSTRINGTerminalRuleCall_2_0() { return cToSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//classes+=ClassMapping*
		public Assignment getClassesAssignment_4() { return cClassesAssignment_4; }

		//ClassMapping
		public RuleCall getClassesClassMappingParserRuleCall_4_0() { return cClassesClassMappingParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ClassMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFromEClassifierCrossReference_0_0 = (CrossReference)cFromAssignment_0.eContents().get(0);
		private final RuleCall cFromEClassifierQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cFromEClassifierCrossReference_0_0.eContents().get(1);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cToSTRINGTerminalRuleCall_2_0 = (RuleCall)cToAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesPropertyMappingParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ClassMapping returns ClassBinding:
		//	from=[ecore::EClassifier|QualifiedName] "to" to=STRING "{" properties+=PropertyMapping* "}";
		@Override public ParserRule getRule() { return rule; }

		//from=[ecore::EClassifier|QualifiedName] "to" to=STRING "{" properties+=PropertyMapping* "}"
		public Group getGroup() { return cGroup; }

		//from=[ecore::EClassifier|QualifiedName]
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }

		//[ecore::EClassifier|QualifiedName]
		public CrossReference getFromEClassifierCrossReference_0_0() { return cFromEClassifierCrossReference_0_0; }

		//QualifiedName
		public RuleCall getFromEClassifierQualifiedNameParserRuleCall_0_0_1() { return cFromEClassifierQualifiedNameParserRuleCall_0_0_1; }

		//"to"
		public Keyword getToKeyword_1() { return cToKeyword_1; }

		//to=STRING
		public Assignment getToAssignment_2() { return cToAssignment_2; }

		//STRING
		public RuleCall getToSTRINGTerminalRuleCall_2_0() { return cToSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//properties+=PropertyMapping*
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }

		//PropertyMapping
		public RuleCall getPropertiesPropertyMappingParserRuleCall_4_0() { return cPropertiesPropertyMappingParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class PropertyMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFromETypedElementCrossReference_0_0 = (CrossReference)cFromAssignment_0.eContents().get(0);
		private final RuleCall cFromETypedElementQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cFromETypedElementCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cToSTRINGTerminalRuleCall_2_0 = (RuleCall)cToAssignment_2.eContents().get(0);
		
		//PropertyMapping returns PropertyBinding:
		//	from=[ecore::ETypedElement|QualifiedName] ":" to=STRING;
		@Override public ParserRule getRule() { return rule; }

		//from=[ecore::ETypedElement|QualifiedName] ":" to=STRING
		public Group getGroup() { return cGroup; }

		//from=[ecore::ETypedElement|QualifiedName]
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }

		//[ecore::ETypedElement|QualifiedName]
		public CrossReference getFromETypedElementCrossReference_0_0() { return cFromETypedElementCrossReference_0_0; }

		//QualifiedName
		public RuleCall getFromETypedElementQualifiedNameParserRuleCall_0_0_1() { return cFromETypedElementQualifiedNameParserRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//to=STRING
		public Assignment getToAssignment_2() { return cToAssignment_2; }

		//STRING
		public RuleCall getToSTRINGTerminalRuleCall_2_0() { return cToSTRINGTerminalRuleCall_2_0; }
	}

	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMergeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSliceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWeaveParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Operator:
		//	Import | Merge | Slice | Weave;
		@Override public ParserRule getRule() { return rule; }

		//Import | Merge | Slice | Weave
		public Alternatives getAlternatives() { return cAlternatives; }

		//Import
		public RuleCall getImportParserRuleCall_0() { return cImportParserRuleCall_0; }

		//Merge
		public RuleCall getMergeParserRuleCall_1() { return cMergeParserRuleCall_1; }

		//Slice
		public RuleCall getSliceParserRuleCall_2() { return cSliceParserRuleCall_2; }

		//Weave
		public RuleCall getWeaveParserRuleCall_3() { return cWeaveParserRuleCall_3; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSyntaxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEcoreUriAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEcoreUriSTRINGTerminalRuleCall_1_0 = (RuleCall)cEcoreUriAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithGenmodelKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cGenmodelUrisAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cGenmodelUrisSTRINGTerminalRuleCall_2_1_0_0 = (RuleCall)cGenmodelUrisAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cGenmodelUrisAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cGenmodelUrisSTRINGTerminalRuleCall_2_1_1_1_0 = (RuleCall)cGenmodelUrisAssignment_2_1_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAndRenameKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cMappingRulesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cMappingRulesPackageMappingParserRuleCall_3_2_0 = (RuleCall)cMappingRulesAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//Import:
		//	"syntax" ecoreUri=STRING ("withGenmodel" (genmodelUris+=STRING ("," genmodelUris+=STRING)*))? ("and-rename" "{"
		//	mappingRules+=PackageMapping* "}")?;
		@Override public ParserRule getRule() { return rule; }

		//"syntax" ecoreUri=STRING ("withGenmodel" (genmodelUris+=STRING ("," genmodelUris+=STRING)*))? ("and-rename" "{"
		//mappingRules+=PackageMapping* "}")?
		public Group getGroup() { return cGroup; }

		//"syntax"
		public Keyword getSyntaxKeyword_0() { return cSyntaxKeyword_0; }

		//ecoreUri=STRING
		public Assignment getEcoreUriAssignment_1() { return cEcoreUriAssignment_1; }

		//STRING
		public RuleCall getEcoreUriSTRINGTerminalRuleCall_1_0() { return cEcoreUriSTRINGTerminalRuleCall_1_0; }

		//("withGenmodel" (genmodelUris+=STRING ("," genmodelUris+=STRING)*))?
		public Group getGroup_2() { return cGroup_2; }

		//"withGenmodel"
		public Keyword getWithGenmodelKeyword_2_0() { return cWithGenmodelKeyword_2_0; }

		//genmodelUris+=STRING ("," genmodelUris+=STRING)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//genmodelUris+=STRING
		public Assignment getGenmodelUrisAssignment_2_1_0() { return cGenmodelUrisAssignment_2_1_0; }

		//STRING
		public RuleCall getGenmodelUrisSTRINGTerminalRuleCall_2_1_0_0() { return cGenmodelUrisSTRINGTerminalRuleCall_2_1_0_0; }

		//("," genmodelUris+=STRING)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//genmodelUris+=STRING
		public Assignment getGenmodelUrisAssignment_2_1_1_1() { return cGenmodelUrisAssignment_2_1_1_1; }

		//STRING
		public RuleCall getGenmodelUrisSTRINGTerminalRuleCall_2_1_1_1_0() { return cGenmodelUrisSTRINGTerminalRuleCall_2_1_1_1_0; }

		//("and-rename" "{" mappingRules+=PackageMapping* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"and-rename"
		public Keyword getAndRenameKeyword_3_0() { return cAndRenameKeyword_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//mappingRules+=PackageMapping*
		public Assignment getMappingRulesAssignment_3_2() { return cMappingRulesAssignment_3_2; }

		//PackageMapping
		public RuleCall getMappingRulesPackageMappingParserRuleCall_3_2_0() { return cMappingRulesPackageMappingParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}

	public class MergeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Merge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMergeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMergedLanguageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMergedLanguageLanguageCrossReference_1_0 = (CrossReference)cMergedLanguageAssignment_1.eContents().get(0);
		private final RuleCall cMergedLanguageLanguageQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cMergedLanguageLanguageCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAndRenameKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cMappingRulesAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cMappingRulesPackageMappingParserRuleCall_2_2_0 = (RuleCall)cMappingRulesAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Merge:
		//	"merge" mergedLanguage=[Language|QualifiedName] ("and-rename" "{" mappingRules+=PackageMapping* "}")?;
		@Override public ParserRule getRule() { return rule; }

		//"merge" mergedLanguage=[Language|QualifiedName] ("and-rename" "{" mappingRules+=PackageMapping* "}")?
		public Group getGroup() { return cGroup; }

		//"merge"
		public Keyword getMergeKeyword_0() { return cMergeKeyword_0; }

		//mergedLanguage=[Language|QualifiedName]
		public Assignment getMergedLanguageAssignment_1() { return cMergedLanguageAssignment_1; }

		//[Language|QualifiedName]
		public CrossReference getMergedLanguageLanguageCrossReference_1_0() { return cMergedLanguageLanguageCrossReference_1_0; }

		//QualifiedName
		public RuleCall getMergedLanguageLanguageQualifiedNameParserRuleCall_1_0_1() { return cMergedLanguageLanguageQualifiedNameParserRuleCall_1_0_1; }

		//("and-rename" "{" mappingRules+=PackageMapping* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"and-rename"
		public Keyword getAndRenameKeyword_2_0() { return cAndRenameKeyword_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }

		//mappingRules+=PackageMapping*
		public Assignment getMappingRulesAssignment_2_2() { return cMappingRulesAssignment_2_2; }

		//PackageMapping
		public RuleCall getMappingRulesPackageMappingParserRuleCall_2_2_0() { return cMappingRulesPackageMappingParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
	}

	public class SliceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Slice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSliceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSlicedLanguageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSlicedLanguageLanguageCrossReference_1_0 = (CrossReference)cSlicedLanguageAssignment_1.eContents().get(0);
		private final RuleCall cSlicedLanguageLanguageQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cSlicedLanguageLanguageCrossReference_1_0.eContents().get(1);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRootsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRootsEClassCrossReference_4_0 = (CrossReference)cRootsAssignment_4.eContents().get(0);
		private final RuleCall cRootsEClassQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cRootsEClassCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRootsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cRootsEClassCrossReference_5_1_0 = (CrossReference)cRootsAssignment_5_1.eContents().get(0);
		private final RuleCall cRootsEClassQualifiedNameParserRuleCall_5_1_0_1 = (RuleCall)cRootsEClassCrossReference_5_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cAndRenameKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cMappingRulesAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cMappingRulesPackageMappingParserRuleCall_7_2_0 = (RuleCall)cMappingRulesAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//Slice:
		//	"slice" slicedLanguage=[Language|QualifiedName] "on" "[" roots+=[ecore::EClass|QualifiedName] (","
		//	roots+=[ecore::EClass|QualifiedName])* "]" ("and-rename" "{" mappingRules+=PackageMapping* "}")?;
		@Override public ParserRule getRule() { return rule; }

		//"slice" slicedLanguage=[Language|QualifiedName] "on" "[" roots+=[ecore::EClass|QualifiedName] (","
		//roots+=[ecore::EClass|QualifiedName])* "]" ("and-rename" "{" mappingRules+=PackageMapping* "}")?
		public Group getGroup() { return cGroup; }

		//"slice"
		public Keyword getSliceKeyword_0() { return cSliceKeyword_0; }

		//slicedLanguage=[Language|QualifiedName]
		public Assignment getSlicedLanguageAssignment_1() { return cSlicedLanguageAssignment_1; }

		//[Language|QualifiedName]
		public CrossReference getSlicedLanguageLanguageCrossReference_1_0() { return cSlicedLanguageLanguageCrossReference_1_0; }

		//QualifiedName
		public RuleCall getSlicedLanguageLanguageQualifiedNameParserRuleCall_1_0_1() { return cSlicedLanguageLanguageQualifiedNameParserRuleCall_1_0_1; }

		//"on"
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//roots+=[ecore::EClass|QualifiedName]
		public Assignment getRootsAssignment_4() { return cRootsAssignment_4; }

		//[ecore::EClass|QualifiedName]
		public CrossReference getRootsEClassCrossReference_4_0() { return cRootsEClassCrossReference_4_0; }

		//QualifiedName
		public RuleCall getRootsEClassQualifiedNameParserRuleCall_4_0_1() { return cRootsEClassQualifiedNameParserRuleCall_4_0_1; }

		//("," roots+=[ecore::EClass|QualifiedName])*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//roots+=[ecore::EClass|QualifiedName]
		public Assignment getRootsAssignment_5_1() { return cRootsAssignment_5_1; }

		//[ecore::EClass|QualifiedName]
		public CrossReference getRootsEClassCrossReference_5_1_0() { return cRootsEClassCrossReference_5_1_0; }

		//QualifiedName
		public RuleCall getRootsEClassQualifiedNameParserRuleCall_5_1_0_1() { return cRootsEClassQualifiedNameParserRuleCall_5_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }

		//("and-rename" "{" mappingRules+=PackageMapping* "}")?
		public Group getGroup_7() { return cGroup_7; }

		//"and-rename"
		public Keyword getAndRenameKeyword_7_0() { return cAndRenameKeyword_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }

		//mappingRules+=PackageMapping*
		public Assignment getMappingRulesAssignment_7_2() { return cMappingRulesAssignment_7_2; }

		//PackageMapping
		public RuleCall getMappingRulesPackageMappingParserRuleCall_7_2_0() { return cMappingRulesPackageMappingParserRuleCall_7_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}

	public class InheritElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Inherit");
		private final Assignment cSuperLanguageAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSuperLanguageLanguageCrossReference_0 = (CrossReference)cSuperLanguageAssignment.eContents().get(0);
		private final RuleCall cSuperLanguageLanguageQualifiedNameParserRuleCall_0_1 = (RuleCall)cSuperLanguageLanguageCrossReference_0.eContents().get(1);
		
		//Inherit returns Inheritance:
		//	superLanguage=[Language|QualifiedName];
		@Override public ParserRule getRule() { return rule; }

		//superLanguage=[Language|QualifiedName]
		public Assignment getSuperLanguageAssignment() { return cSuperLanguageAssignment; }

		//[Language|QualifiedName]
		public CrossReference getSuperLanguageLanguageCrossReference_0() { return cSuperLanguageLanguageCrossReference_0; }

		//QualifiedName
		public RuleCall getSuperLanguageLanguageQualifiedNameParserRuleCall_0_1() { return cSuperLanguageLanguageQualifiedNameParserRuleCall_0_1; }
	}

	public class WeaveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Weave");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAspectTypeRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAspectWildcardParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Weave:
		//	AspectTypeRef | AspectWildcard;
		@Override public ParserRule getRule() { return rule; }

		//AspectTypeRef | AspectWildcard
		public Alternatives getAlternatives() { return cAlternatives; }

		//AspectTypeRef
		public RuleCall getAspectTypeRefParserRuleCall_0() { return cAspectTypeRefParserRuleCall_0; }

		//AspectWildcard
		public RuleCall getAspectWildcardParserRuleCall_1() { return cAspectWildcardParserRuleCall_1; }
	}

	public class AspectTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AspectTypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAspectTypeRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAspectTypeRefJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cAspectTypeRefAssignment_1.eContents().get(0);
		
		//AspectTypeRef returns Weave:
		//	"with" aspectTypeRef=JvmTypeReference;
		@Override public ParserRule getRule() { return rule; }

		//"with" aspectTypeRef=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//"with"
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }

		//aspectTypeRef=JvmTypeReference
		public Assignment getAspectTypeRefAssignment_1() { return cAspectTypeRefAssignment_1; }

		//JvmTypeReference
		public RuleCall getAspectTypeRefJvmTypeReferenceParserRuleCall_1_0() { return cAspectTypeRefJvmTypeReferenceParserRuleCall_1_0; }
	}

	public class AspectWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AspectWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAspectWildcardImportAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAspectWildcardImportQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cAspectWildcardImportAssignment_1.eContents().get(0);
		
		/// * --- Kompren Rules --- * / //Slicer returns kompren::Slicer: 'slicer' (active?='active')? (strict?='strict')? name=QualifiedName '{'
		////		(('domain' ':' uriMetamodel+=STRING)+ &
		////		('outputDomain' ':' outputMetamodel=STRING)? &
		////		('input' ':' inputClasses+=[ecore::EClass|QualifiedName] ( "," inputClasses+=[ecore::EClass|QualifiedName])*) &
		////		('radius' ':' radius=Radius)? &
		////		(('slicedClass' ':' slicedElements+=SlicedClass) |
		////		('slicedProperty' ':' slicedElements+=SlicedProperty))* &
		////		('onStart' onStart=CODE_BLOCK)? &
		////		('onEnd' onEnd=CODE_BLOCK)? &
		////		('helper' helper=CODE_BLOCK)?)
		////	'}';
		////
		////Constraint returns kompren::Constraint: name=ValidID expression=CODE_BLOCK;
		////
		////Radius returns kompren::Radius: {kompren::Radius} (focusedClasses+=[kompren::SlicedClass|QualifiedName] ( "," focusedClasses+=[kompren::SlicedClass|QualifiedName])* )?;
		////
		////SlicedClass returns kompren::SlicedClass: domain=[ecore::EClass|QualifiedName] (isOption?='option')? (ctx=VarDecl)? 
		////	(expression=CODE_BLOCK)? ('constraint' ':' constraints+=Constraint)*;
		////
		////VarDecl returns kompren::VarDecl: varName=ValidID;
		////
		////SlicedProperty returns kompren::SlicedProperty:
		////	domain=[ecore::EStructuralFeature|QualifiedName] (isOption?='option')? (opposite=OppositeCreation)? (src=VarDecl tgt=VarDecl)?
		////		 (expression=CODE_BLOCK)? ('constraint' ':' constraints+=Constraint)*;
		////
		////OppositeCreation returns kompren::OppositeCreation: {kompren::OppositeCreation} 'opposite' '(' name=ValidID ')';
		////
		////terminal CODE_BLOCK : '[[' -> ']]';
		//AspectWildcard returns Weave:
		//	"with" aspectWildcardImport=QualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }

		//"with" aspectWildcardImport=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"with"
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }

		//aspectWildcardImport=QualifiedNameWithWildcard
		public Assignment getAspectWildcardImportAssignment_1() { return cAspectWildcardImportAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getAspectWildcardImportQualifiedNameWithWildcardParserRuleCall_1_0() { return cAspectWildcardImportQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	
	
	public class ResourceTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMELANGEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMELANGEMelangeKeyword_0_0 = (Keyword)cMELANGEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEMFEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEMFEMFKeyword_1_0 = (Keyword)cEMFEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cXTEXTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cXTEXTXtextKeyword_2_0 = (Keyword)cXTEXTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ResourceType:
		//	MELANGE="Melange" | EMF | XTEXT="Xtext";
		public EnumRule getRule() { return rule; }

		//MELANGE="Melange" | EMF | XTEXT="Xtext"
		public Alternatives getAlternatives() { return cAlternatives; }

		//MELANGE="Melange"
		public EnumLiteralDeclaration getMELANGEEnumLiteralDeclaration_0() { return cMELANGEEnumLiteralDeclaration_0; }

		//"Melange"
		public Keyword getMELANGEMelangeKeyword_0_0() { return cMELANGEMelangeKeyword_0_0; }

		//EMF
		public EnumLiteralDeclaration getEMFEnumLiteralDeclaration_1() { return cEMFEnumLiteralDeclaration_1; }

		//"EMF"
		public Keyword getEMFEMFKeyword_1_0() { return cEMFEMFKeyword_1_0; }

		//XTEXT="Xtext"
		public EnumLiteralDeclaration getXTEXTEnumLiteralDeclaration_2() { return cXTEXTEnumLiteralDeclaration_2; }

		//"Xtext"
		public Keyword getXTEXTXtextKeyword_2_0() { return cXTEXTXtextKeyword_2_0; }
	}
	
	private final ModelTypingSpaceElements pModelTypingSpace;
	private final ElementElements pElement;
	private final TransformationDeclElements pTransformationDecl;
	private final LanguageElements pLanguage;
	private final ResourceTypeElements unknownRuleResourceType;
	private final EcoreModelTypeElements pEcoreModelType;
	private final XbaseTransformationElements pXbaseTransformation;
	private final MappingElements pMapping;
	private final PackageMappingElements pPackageMapping;
	private final ClassMappingElements pClassMapping;
	private final PropertyMappingElements pPropertyMapping;
	private final OperatorElements pOperator;
	private final ImportElements pImport;
	private final MergeElements pMerge;
	private final SliceElements pSlice;
	private final InheritElements pInherit;
	private final WeaveElements pWeave;
	private final AspectTypeRefElements pAspectTypeRef;
	private final AspectWildcardElements pAspectWildcard;
	
	private final Grammar grammar;

	private final XbaseGrammarAccess gaXbase;

	@Inject
	public MelangeGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.pModelTypingSpace = new ModelTypingSpaceElements();
		this.pElement = new ElementElements();
		this.pTransformationDecl = new TransformationDeclElements();
		this.pLanguage = new LanguageElements();
		this.unknownRuleResourceType = new ResourceTypeElements();
		this.pEcoreModelType = new EcoreModelTypeElements();
		this.pXbaseTransformation = new XbaseTransformationElements();
		this.pMapping = new MappingElements();
		this.pPackageMapping = new PackageMappingElements();
		this.pClassMapping = new ClassMappingElements();
		this.pPropertyMapping = new PropertyMappingElements();
		this.pOperator = new OperatorElements();
		this.pImport = new ImportElements();
		this.pMerge = new MergeElements();
		this.pSlice = new SliceElements();
		this.pInherit = new InheritElements();
		this.pWeave = new WeaveElements();
		this.pAspectTypeRef = new AspectTypeRefElements();
		this.pAspectWildcard = new AspectWildcardElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.inria.diverse.melange.Melange".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	////import "http://kompren/fr.inria.diverse.kompren" as kompren
	//ModelTypingSpace:
	//	("package" name=QualifiedName)? imports=XImportSection? elements+=Element*;
	public ModelTypingSpaceElements getModelTypingSpaceAccess() {
		return pModelTypingSpace;
	}
	
	public ParserRule getModelTypingSpaceRule() {
		return getModelTypingSpaceAccess().getRule();
	}

	//Element:
	//	Language | EcoreModelType | TransformationDecl | Mapping;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//TransformationDecl returns Transformation: // | KomprenSlicer
	//	XbaseTransformation;
	public TransformationDeclElements getTransformationDeclAccess() {
		return pTransformationDecl;
	}
	
	public ParserRule getTransformationDeclRule() {
		return getTransformationDeclAccess().getRule();
	}

	//Language:
	//	"language" name=ValidID ("inherits" operators+=Inherit ("," operators+=Inherit)*)? ("implements"
	//	implements+=[ModelType|QualifiedName] ("," implements+=[ModelType|QualifiedName])*)? ("requires"
	//	requires+=[ModelType|QualifiedName] ("," requires+=[ModelType|QualifiedName])*)? "{" ("resource"
	//	resourceType=ResourceType ("uri" resourceUri=STRING | "setup" xtextSetupRef=JvmTypeReference)?)? &
	//	operators+=Operator* & ("exactType" exactTypeName=ValidID ("uri" exactTypeUri=STRING)?) "}";
	public LanguageElements getLanguageAccess() {
		return pLanguage;
	}
	
	public ParserRule getLanguageRule() {
		return getLanguageAccess().getRule();
	}

	//enum ResourceType:
	//	MELANGE="Melange" | EMF | XTEXT="Xtext";
	public ResourceTypeElements getResourceTypeAccess() {
		return unknownRuleResourceType;
	}
	
	public EnumRule getResourceTypeRule() {
		return getResourceTypeAccess().getRule();
	}

	////Inheritance returns Inheritance:
	////	'inherits' superMetamodel = [Metamodel | QualifiedName]
	////;
	//EcoreModelType returns ModelType:
	//	"modeltype" name=ValidID "{" "syntax" ecoreUri=STRING & ("uri" mtUri=STRING)? "}";
	public EcoreModelTypeElements getEcoreModelTypeAccess() {
		return pEcoreModelType;
	}
	
	public ParserRule getEcoreModelTypeRule() {
		return getEcoreModelTypeAccess().getRule();
	}

	//XbaseTransformation:
	//	main?="@Main"? "transformation" returnTypeRef=JvmTypeReference? name=ValidID "(" (parameters+=FullJvmFormalParameter
	//	("," parameters+=FullJvmFormalParameter)*)? ")" body=XBlockExpression;
	public XbaseTransformationElements getXbaseTransformationAccess() {
		return pXbaseTransformation;
	}
	
	public ParserRule getXbaseTransformationRule() {
		return getXbaseTransformationAccess().getRule();
	}

	////KomprenSlicer:
	////	slicer = Slicer
	////;
	//Mapping:
	//	"map" from=[Language|QualifiedName] "to" to=[ModelType|QualifiedName] "{" rules+=ClassMapping* "}";
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}

	//PackageMapping returns PackageBinding:
	//	from=[ecore::EPackage|QualifiedName] "to" to=STRING "{" classes+=ClassMapping* "}";
	public PackageMappingElements getPackageMappingAccess() {
		return pPackageMapping;
	}
	
	public ParserRule getPackageMappingRule() {
		return getPackageMappingAccess().getRule();
	}

	//ClassMapping returns ClassBinding:
	//	from=[ecore::EClassifier|QualifiedName] "to" to=STRING "{" properties+=PropertyMapping* "}";
	public ClassMappingElements getClassMappingAccess() {
		return pClassMapping;
	}
	
	public ParserRule getClassMappingRule() {
		return getClassMappingAccess().getRule();
	}

	//PropertyMapping returns PropertyBinding:
	//	from=[ecore::ETypedElement|QualifiedName] ":" to=STRING;
	public PropertyMappingElements getPropertyMappingAccess() {
		return pPropertyMapping;
	}
	
	public ParserRule getPropertyMappingRule() {
		return getPropertyMappingAccess().getRule();
	}

	//Operator:
	//	Import | Merge | Slice | Weave;
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//Import:
	//	"syntax" ecoreUri=STRING ("withGenmodel" (genmodelUris+=STRING ("," genmodelUris+=STRING)*))? ("and-rename" "{"
	//	mappingRules+=PackageMapping* "}")?;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Merge:
	//	"merge" mergedLanguage=[Language|QualifiedName] ("and-rename" "{" mappingRules+=PackageMapping* "}")?;
	public MergeElements getMergeAccess() {
		return pMerge;
	}
	
	public ParserRule getMergeRule() {
		return getMergeAccess().getRule();
	}

	//Slice:
	//	"slice" slicedLanguage=[Language|QualifiedName] "on" "[" roots+=[ecore::EClass|QualifiedName] (","
	//	roots+=[ecore::EClass|QualifiedName])* "]" ("and-rename" "{" mappingRules+=PackageMapping* "}")?;
	public SliceElements getSliceAccess() {
		return pSlice;
	}
	
	public ParserRule getSliceRule() {
		return getSliceAccess().getRule();
	}

	//Inherit returns Inheritance:
	//	superLanguage=[Language|QualifiedName];
	public InheritElements getInheritAccess() {
		return pInherit;
	}
	
	public ParserRule getInheritRule() {
		return getInheritAccess().getRule();
	}

	//Weave:
	//	AspectTypeRef | AspectWildcard;
	public WeaveElements getWeaveAccess() {
		return pWeave;
	}
	
	public ParserRule getWeaveRule() {
		return getWeaveAccess().getRule();
	}

	//AspectTypeRef returns Weave:
	//	"with" aspectTypeRef=JvmTypeReference;
	public AspectTypeRefElements getAspectTypeRefAccess() {
		return pAspectTypeRef;
	}
	
	public ParserRule getAspectTypeRefRule() {
		return getAspectTypeRefAccess().getRule();
	}

	/// * --- Kompren Rules --- * / //Slicer returns kompren::Slicer: 'slicer' (active?='active')? (strict?='strict')? name=QualifiedName '{'
	////		(('domain' ':' uriMetamodel+=STRING)+ &
	////		('outputDomain' ':' outputMetamodel=STRING)? &
	////		('input' ':' inputClasses+=[ecore::EClass|QualifiedName] ( "," inputClasses+=[ecore::EClass|QualifiedName])*) &
	////		('radius' ':' radius=Radius)? &
	////		(('slicedClass' ':' slicedElements+=SlicedClass) |
	////		('slicedProperty' ':' slicedElements+=SlicedProperty))* &
	////		('onStart' onStart=CODE_BLOCK)? &
	////		('onEnd' onEnd=CODE_BLOCK)? &
	////		('helper' helper=CODE_BLOCK)?)
	////	'}';
	////
	////Constraint returns kompren::Constraint: name=ValidID expression=CODE_BLOCK;
	////
	////Radius returns kompren::Radius: {kompren::Radius} (focusedClasses+=[kompren::SlicedClass|QualifiedName] ( "," focusedClasses+=[kompren::SlicedClass|QualifiedName])* )?;
	////
	////SlicedClass returns kompren::SlicedClass: domain=[ecore::EClass|QualifiedName] (isOption?='option')? (ctx=VarDecl)? 
	////	(expression=CODE_BLOCK)? ('constraint' ':' constraints+=Constraint)*;
	////
	////VarDecl returns kompren::VarDecl: varName=ValidID;
	////
	////SlicedProperty returns kompren::SlicedProperty:
	////	domain=[ecore::EStructuralFeature|QualifiedName] (isOption?='option')? (opposite=OppositeCreation)? (src=VarDecl tgt=VarDecl)?
	////		 (expression=CODE_BLOCK)? ('constraint' ':' constraints+=Constraint)*;
	////
	////OppositeCreation returns kompren::OppositeCreation: {kompren::OppositeCreation} 'opposite' '(' name=ValidID ')';
	////
	////terminal CODE_BLOCK : '[[' -> ']]';
	//AspectWildcard returns Weave:
	//	"with" aspectWildcardImport=QualifiedNameWithWildcard;
	public AspectWildcardElements getAspectWildcardAccess() {
		return pAspectWildcard;
	}
	
	public ParserRule getAspectWildcardRule() {
		return getAspectWildcardAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)?
	//	"}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXbase.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
